2017-07-13 13:39:13,443 INFO Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-13 13:39:13,483 INFO Workflow: {'status': 'Submitted', 'id': '5ee6023a-ae9a-4181-998a-4e6ed7bf282c'}
2017-07-13 13:39:15,485 INFO Testing query_logs...
2017-07-13 13:39:15,502 INFO Result: {'id': '5ee6023a-ae9a-4181-998a-4e6ed7bf282c'}
2017-07-13 13:39:15,503 INFO Testing query_metadata...
2017-07-13 13:39:15,526 INFO Result: {'calls': {}, 'inputs': {}, 'status': 'Submitted', 'submission': '2017-07-13T13:39:13.446-04:00', 'id': '5ee6023a-ae9a-4181-998a-4e6ed7bf282c', 'outputs': {}, 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":false,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":false,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":false,"gatk.samples_file":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/data/pfal_5.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":false,"gatk.ts_filter_indel":99.0,"gatk.vqsr":false,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'workflow': '# GATK WDL\r\n# import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        #call sub.hc_scatter {\r\n            #input:\r\n            #intervals_file = CreateIntervalsList.out,\r\n            #gatk = gatk,\r\n            #ref = CheckIndex.out,\r\n            #sample_name = sample[0],\r\n            #sample_dir = MakeSampleDir.out,\r\n            #in_bam = hc_bam,\r\n            #bqsr_recal_report = bqsr_recal_report,\r\n            #ploidy = ploidy,\r\n            #erc = erc,\r\n            #extra_hc_params = extra_hc_params\r\n            #}\r\n            #output {\r\n            #    String hc_scatter_output = hc_scatter.out\r\n            #}\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = HaplotypeCaller.vcf,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'options': '{\n\n}'}}
2017-07-13 13:39:15,529 INFO Testing query_status...
2017-07-13 13:39:15,542 INFO Result: {'status': 'Submitted', 'id': '5ee6023a-ae9a-4181-998a-4e6ed7bf282c'}
2017-07-13 13:39:15,543 INFO Testing start_workflow...
2017-07-13 13:39:15,543 INFO Testing stop_workflow...
2017-07-13 13:39:15,561 INFO Result: {'status': 'Aborted', 'id': '5ee6023a-ae9a-4181-998a-4e6ed7bf282c'}
2017-07-13 13:39:15,562 INFO Test done!
2017-07-13 14:16:05,114 INFO Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-13 14:16:05,156 INFO Workflow: {'id': '80f7c00e-1eb8-4411-a7c3-798780f3485f', 'status': 'Submitted'}
2017-07-13 14:16:07,156 INFO Testing query_logs...
2017-07-13 14:16:07,173 INFO Result: {'id': '80f7c00e-1eb8-4411-a7c3-798780f3485f'}
2017-07-13 14:16:07,173 INFO Testing query_metadata...
2017-07-13 14:16:07,195 INFO Result: {'submission': '2017-07-13T14:16:05.125-04:00', 'id': '80f7c00e-1eb8-4411-a7c3-798780f3485f', 'outputs': {}, 'submittedFiles': {'workflow': '# GATK WDL\r\n# import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        #call sub.hc_scatter {\r\n            #input:\r\n            #intervals_file = CreateIntervalsList.out,\r\n            #gatk = gatk,\r\n            #ref = CheckIndex.out,\r\n            #sample_name = sample[0],\r\n            #sample_dir = MakeSampleDir.out,\r\n            #in_bam = hc_bam,\r\n            #bqsr_recal_report = bqsr_recal_report,\r\n            #ploidy = ploidy,\r\n            #erc = erc,\r\n            #extra_hc_params = extra_hc_params\r\n            #}\r\n            #output {\r\n            #    String hc_scatter_output = hc_scatter.out\r\n            #}\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = HaplotypeCaller.vcf,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'options': '{\n\n}', 'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":false,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":false,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":false,"gatk.samples_file":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/data/pfal_5.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":false,"gatk.ts_filter_indel":99.0,"gatk.vqsr":false,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}'}, 'calls': {}, 'status': 'Submitted', 'inputs': {}}
2017-07-13 14:16:07,196 INFO Testing query_status...
2017-07-13 14:16:07,209 INFO Result: {'id': '80f7c00e-1eb8-4411-a7c3-798780f3485f', 'status': 'Submitted'}
2017-07-13 14:16:07,210 INFO Testing start_workflow...
2017-07-13 14:16:07,210 INFO Testing stop_workflow...
2017-07-13 14:16:07,227 INFO Result: {'id': '80f7c00e-1eb8-4411-a7c3-798780f3485f', 'status': 'Aborted'}
2017-07-13 14:16:07,227 INFO Test done!
2017-07-14 13:51:24,100 INFO Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-14 13:51:24,301 INFO Workflow: {'status': 'Submitted', 'id': '4230008e-77c1-42e8-8f7c-6bc2c75c7238'}
2017-07-14 13:51:26,303 INFO Testing query_logs...
2017-07-14 13:51:26,340 INFO Result: {'id': '4230008e-77c1-42e8-8f7c-6bc2c75c7238'}
2017-07-14 13:51:26,341 INFO Testing query_metadata...
2017-07-14 13:51:26,401 INFO Result: {'inputs': {}, 'outputs': {}, 'id': '4230008e-77c1-42e8-8f7c-6bc2c75c7238', 'calls': {}, 'status': 'Submitted', 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":false,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":false,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":false,"gatk.samples_file":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/data/pfal_5.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":false,"gatk.ts_filter_indel":99.0,"gatk.vqsr":false,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'options': '{\n\n}', 'workflow': '# GATK WDL\r\n# import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        #call sub.hc_scatter {\r\n            #input:\r\n            #intervals_file = CreateIntervalsList.out,\r\n            #gatk = gatk,\r\n            #ref = CheckIndex.out,\r\n            #sample_name = sample[0],\r\n            #sample_dir = MakeSampleDir.out,\r\n            #in_bam = hc_bam,\r\n            #bqsr_recal_report = bqsr_recal_report,\r\n            #ploidy = ploidy,\r\n            #erc = erc,\r\n            #extra_hc_params = extra_hc_params\r\n            #}\r\n            #output {\r\n            #    String hc_scatter_output = hc_scatter.out\r\n            #}\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = HaplotypeCaller.vcf,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, 'submission': '2017-07-14T13:51:25.112-04:00'}
2017-07-14 13:51:26,403 INFO Testing query_status...
2017-07-14 13:51:26,435 INFO Result: {'status': 'Submitted', 'id': '4230008e-77c1-42e8-8f7c-6bc2c75c7238'}
2017-07-14 13:51:26,436 INFO Testing start_workflow...
2017-07-14 13:51:26,437 INFO Testing stop_workflow...
2017-07-14 13:51:26,476 INFO Result: {'status': 'Aborted', 'id': '4230008e-77c1-42e8-8f7c-6bc2c75c7238'}
2017-07-14 13:51:26,477 INFO Test done!
2017-07-14 13:51:55,207 INFO Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-14 13:51:55,376 INFO Workflow: {'status': 'Submitted', 'id': 'f97a50cd-32f6-4ede-8a3f-77eb892e83f3'}
2017-07-14 13:51:57,389 INFO Testing query_logs...
2017-07-14 13:51:57,454 INFO Result: {'id': 'f97a50cd-32f6-4ede-8a3f-77eb892e83f3'}
2017-07-14 13:51:57,460 INFO Testing query_metadata...
2017-07-14 13:51:57,540 INFO Result: {'calls': {}, 'outputs': {}, 'id': 'f97a50cd-32f6-4ede-8a3f-77eb892e83f3', 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":false,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":false,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":false,"gatk.samples_file":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/data/pfal_5.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":false,"gatk.ts_filter_indel":99.0,"gatk.vqsr":false,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'options': '{\n\n}', 'workflow': '# GATK WDL\r\n# import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        #call sub.hc_scatter {\r\n            #input:\r\n            #intervals_file = CreateIntervalsList.out,\r\n            #gatk = gatk,\r\n            #ref = CheckIndex.out,\r\n            #sample_name = sample[0],\r\n            #sample_dir = MakeSampleDir.out,\r\n            #in_bam = hc_bam,\r\n            #bqsr_recal_report = bqsr_recal_report,\r\n            #ploidy = ploidy,\r\n            #erc = erc,\r\n            #extra_hc_params = extra_hc_params\r\n            #}\r\n            #output {\r\n            #    String hc_scatter_output = hc_scatter.out\r\n            #}\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = HaplotypeCaller.vcf,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, 'inputs': {}, 'status': 'Submitted', 'submission': '2017-07-14T13:51:56.188-04:00'}
2017-07-14 13:51:57,547 INFO Testing query_status...
2017-07-14 13:51:57,605 INFO Result: {'status': 'Submitted', 'id': 'f97a50cd-32f6-4ede-8a3f-77eb892e83f3'}
2017-07-14 13:51:57,611 INFO Testing start_workflow...
2017-07-14 13:51:57,618 INFO Testing stop_workflow...
2017-07-14 13:51:57,678 INFO Result: {'status': 'Aborted', 'id': 'f97a50cd-32f6-4ede-8a3f-77eb892e83f3'}
2017-07-14 13:51:57,682 INFO Test done!
2017-07-18 16:25:42,676 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-18 16:25:42,808 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': '05a88b6f-9509-4b3a-9004-ae725b8219ef'}
2017-07-18 16:25:44,809 - test_cromwell - INFO - Testing query_logs...
2017-07-18 16:25:44,897 - test_cromwell - INFO - Result: {'id': '05a88b6f-9509-4b3a-9004-ae725b8219ef'}
2017-07-18 16:25:44,898 - test_cromwell - INFO - Testing query_metadata...
2017-07-18 16:25:45,032 - test_cromwell - INFO - Result: {'status': 'Submitted', 'inputs': {}, 'outputs': {}, 'submission': '2017-07-18T16:25:44.257-04:00', 'start': '2017-07-18T16:25:46.272-04:00', 'calls': {}, 'id': '05a88b6f-9509-4b3a-9004-ae725b8219ef', 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":false,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":false,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":false,"gatk.samples_file":"../pfal_5.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":false,"gatk.ts_filter_indel":99.0,"gatk.vqsr":false,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'options': '{\n\n}', 'workflow': '# GATK WDL\r\n# import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        #call sub.hc_scatter {\r\n            #input:\r\n            #intervals_file = CreateIntervalsList.out,\r\n            #gatk = gatk,\r\n            #ref = CheckIndex.out,\r\n            #sample_name = sample[0],\r\n            #sample_dir = MakeSampleDir.out,\r\n            #in_bam = hc_bam,\r\n            #bqsr_recal_report = bqsr_recal_report,\r\n            #ploidy = ploidy,\r\n            #erc = erc,\r\n            #extra_hc_params = extra_hc_params\r\n            #}\r\n            #output {\r\n            #    String hc_scatter_output = hc_scatter.out\r\n            #}\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = HaplotypeCaller.vcf,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}}
2017-07-18 16:25:45,034 - test_cromwell - INFO - Testing query_status...
2017-07-18 16:25:45,106 - test_cromwell - INFO - Result: {'status': 'Submitted', 'id': '05a88b6f-9509-4b3a-9004-ae725b8219ef'}
2017-07-18 16:25:45,107 - test_cromwell - INFO - Testing start_workflow...
2017-07-18 16:25:45,108 - test_cromwell - INFO - Testing stop_workflow...
2017-07-18 16:25:45,157 - test_cromwell - INFO - Result: {'status': 'Aborted', 'id': '05a88b6f-9509-4b3a-9004-ae725b8219ef'}
2017-07-18 16:25:45,157 - test_cromwell - INFO - Test done!
2017-07-20 08:51:23,755 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-20 08:51:23,808 - test_cromwell - INFO - Workflow: {'id': '65ad4676-58e0-49cb-be54-853af537b272', 'status': 'Submitted'}
2017-07-20 08:51:25,808 - test_cromwell - INFO - Testing query_logs...
2017-07-20 08:51:25,823 - test_cromwell - INFO - Result: {'id': '65ad4676-58e0-49cb-be54-853af537b272'}
2017-07-20 08:51:25,824 - test_cromwell - INFO - Testing query_metadata...
2017-07-20 08:51:25,846 - test_cromwell - INFO - Result: {'inputs': {}, 'status': 'Submitted', 'submission': '2017-07-20T08:51:23.513-04:00', 'id': '65ad4676-58e0-49cb-be54-853af537b272', 'calls': {}, 'outputs': {}, 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":false,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":false,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":false,"gatk.samples_file":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/data/pfal_5.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":false,"gatk.ts_filter_indel":99.0,"gatk.vqsr":false,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'workflow': '# GATK WDL\r\n# import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        #call sub.hc_scatter {\r\n            #input:\r\n            #intervals_file = CreateIntervalsList.out,\r\n            #gatk = gatk,\r\n            #ref = CheckIndex.out,\r\n            #sample_name = sample[0],\r\n            #sample_dir = MakeSampleDir.out,\r\n            #in_bam = hc_bam,\r\n            #bqsr_recal_report = bqsr_recal_report,\r\n            #ploidy = ploidy,\r\n            #erc = erc,\r\n            #extra_hc_params = extra_hc_params\r\n            #}\r\n            #output {\r\n            #    String hc_scatter_output = hc_scatter.out\r\n            #}\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = HaplotypeCaller.vcf,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'options': '{\n\n}'}}
2017-07-20 08:51:25,847 - test_cromwell - INFO - Testing query_status...
2017-07-20 08:51:25,868 - test_cromwell - INFO - Result: {'id': '65ad4676-58e0-49cb-be54-853af537b272', 'status': 'Submitted'}
2017-07-20 08:51:25,869 - test_cromwell - INFO - Testing start_workflow...
2017-07-20 08:51:25,869 - test_cromwell - INFO - Testing stop_workflow...
2017-07-20 08:51:25,886 - test_cromwell - INFO - Result: {'id': '65ad4676-58e0-49cb-be54-853af537b272', 'status': 'Aborted'}
2017-07-20 08:51:25,886 - test_cromwell - INFO - Test done!
2017-07-20 08:56:51,825 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-20 08:56:51,873 - test_cromwell - INFO - Workflow: {'id': '075576ef-24c6-419e-b0d8-4713dade76aa', 'status': 'Submitted'}
2017-07-20 08:56:53,873 - test_cromwell - INFO - Testing query_logs...
2017-07-20 08:56:53,892 - test_cromwell - INFO - Result: {'id': '075576ef-24c6-419e-b0d8-4713dade76aa'}
2017-07-20 08:56:53,893 - test_cromwell - INFO - Testing query_metadata...
2017-07-20 08:56:53,915 - test_cromwell - INFO - Result: {'submittedFiles': {'workflow': '# GATK WDL\r\n# import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        #call sub.hc_scatter {\r\n            #input:\r\n            #intervals_file = CreateIntervalsList.out,\r\n            #gatk = gatk,\r\n            #ref = CheckIndex.out,\r\n            #sample_name = sample[0],\r\n            #sample_dir = MakeSampleDir.out,\r\n            #in_bam = hc_bam,\r\n            #bqsr_recal_report = bqsr_recal_report,\r\n            #ploidy = ploidy,\r\n            #erc = erc,\r\n            #extra_hc_params = extra_hc_params\r\n            #}\r\n            #output {\r\n            #    String hc_scatter_output = hc_scatter.out\r\n            #}\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = HaplotypeCaller.vcf,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":false,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":false,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":false,"gatk.samples_file":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/data/pfal_5.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":false,"gatk.ts_filter_indel":99.0,"gatk.vqsr":false,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'options': '{\n\n}'}, 'calls': {}, 'submission': '2017-07-20T08:56:51.569-04:00', 'id': '075576ef-24c6-419e-b0d8-4713dade76aa', 'outputs': {}, 'inputs': {}, 'status': 'Submitted'}
2017-07-20 08:56:53,916 - test_cromwell - INFO - Testing query_status...
2017-07-20 08:56:53,929 - test_cromwell - INFO - Result: {'id': '075576ef-24c6-419e-b0d8-4713dade76aa', 'status': 'Submitted'}
2017-07-20 08:56:53,930 - test_cromwell - INFO - Testing start_workflow...
2017-07-20 08:56:53,930 - test_cromwell - INFO - Testing stop_workflow...
2017-07-20 08:56:53,951 - test_cromwell - INFO - Result: {'id': '075576ef-24c6-419e-b0d8-4713dade76aa', 'status': 'Aborted'}
2017-07-20 08:56:53,951 - test_cromwell - INFO - Test done!
2017-07-27 12:53:26,722 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 12:53:26,771 - test_cromwell - INFO - Workflow: {'id': '6a5cb828-1e7f-4f1e-92b7-49add489aca0', 'status': 'Submitted'}
2017-07-27 12:53:28,771 - test_cromwell - INFO - Testing query_logs...
2017-07-27 12:53:28,788 - test_cromwell - INFO - Result: {'id': '6a5cb828-1e7f-4f1e-92b7-49add489aca0'}
2017-07-27 12:53:28,788 - test_cromwell - INFO - Testing query_metadata...
2017-07-27 12:53:28,807 - test_cromwell - INFO - Result: {'inputs': {}, 'id': '6a5cb828-1e7f-4f1e-92b7-49add489aca0', 'submission': '2017-07-27T12:53:26.740-04:00', 'calls': {}, 'status': 'Submitted', 'outputs': {}, 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'workflow': '# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'options': '{\n\n}'}}
2017-07-27 12:53:28,808 - test_cromwell - INFO - Testing query_status...
2017-07-27 12:53:28,817 - test_cromwell - INFO - Result: {'id': '6a5cb828-1e7f-4f1e-92b7-49add489aca0', 'status': 'Submitted'}
2017-07-27 12:53:28,818 - test_cromwell - INFO - Testing start_workflow...
2017-07-27 12:53:28,818 - test_cromwell - INFO - Testing stop_workflow...
2017-07-27 12:53:28,835 - test_cromwell - INFO - Result: {'id': '6a5cb828-1e7f-4f1e-92b7-49add489aca0', 'status': 'Aborted'}
2017-07-27 12:53:28,836 - test_cromwell - INFO - Test done!
2017-07-27 13:22:02,793 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:22:02,845 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': '8d480fd9-1ec1-4d09-af08-1755d9bcec86'}
2017-07-27 13:22:04,846 - test_cromwell - INFO - Test done!
2017-07-27 13:22:18,396 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:22:18,441 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': 'bfed4e6d-f93a-4299-8070-1e8d4e545914'}
2017-07-27 13:22:20,441 - test_cromwell - INFO - Test done!
2017-07-27 13:23:33,216 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:23:33,256 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': '5fd2ebf5-4cfb-4d32-9c19-19749498618e'}
2017-07-27 13:23:35,257 - test_cromwell - INFO - Test done!
2017-07-27 13:24:08,505 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:24:08,546 - test_cromwell - INFO - Workflow: {'id': '2c5e4e21-d7cc-4cc4-9399-c5f6252ea41c', 'status': 'Submitted'}
2017-07-27 13:24:10,546 - test_cromwell - INFO - Test done!
2017-07-27 13:25:15,572 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:25:15,613 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': '6e81fc00-07b2-458c-914b-24c8121e6b25'}
2017-07-27 13:25:17,614 - test_cromwell - INFO - Test done!
2017-07-27 13:26:07,466 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:26:07,507 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': '2520af79-8ad8-49e3-9fb9-ca7792b678d4'}
2017-07-27 13:26:09,507 - test_cromwell - INFO - Test done!
2017-07-27 13:34:20,485 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:34:20,531 - test_cromwell - INFO - Workflow: {'id': '2148e10d-1d50-45a4-af92-3756550932a2', 'status': 'Submitted'}
2017-07-27 13:34:22,532 - test_cromwell - INFO - Test done!
2017-07-27 13:44:38,607 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:44:38,650 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': 'b1a35d08-aff3-40ec-a3a2-8358d46e2400'}
2017-07-27 13:44:40,651 - test_cromwell - INFO - Test done!
2017-07-27 13:51:37,894 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:51:37,940 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': '77c84298-bfc0-49b0-b502-bee5e86d1b73'}
2017-07-27 13:51:39,946 - test_cromwell - INFO - Test done!
2017-07-27 13:52:10,287 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:52:10,332 - test_cromwell - INFO - Workflow: {'id': '7f8bc516-5064-4674-bd61-db827c9b56c1', 'status': 'Submitted'}
2017-07-27 13:52:12,335 - test_cromwell - INFO - Test done!
2017-07-27 13:53:09,549 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:53:09,587 - test_cromwell - INFO - Workflow: {'id': 'e8ca5c76-32c8-4a7a-893c-c6acbbaacef5', 'status': 'Submitted'}
2017-07-27 13:53:11,589 - test_cromwell - INFO - Test done!
2017-07-27 13:53:26,071 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:53:26,110 - test_cromwell - INFO - Workflow: {'id': '193456e5-c345-47c3-9979-b09bdc7570a4', 'status': 'Submitted'}
2017-07-27 13:53:28,111 - test_cromwell - INFO - Test done!
2017-07-27 13:54:18,861 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:54:18,898 - test_cromwell - INFO - Workflow: {'id': '3b7ea5a1-598e-45b7-9bde-1a04d781ef59', 'status': 'Submitted'}
2017-07-27 13:54:20,899 - test_cromwell - INFO - Test done!
2017-07-27 13:59:38,308 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:59:38,352 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': 'ac4e1289-b57b-4d50-ad87-99d10de80b20'}
2017-07-27 13:59:40,356 - test_cromwell - INFO - Test done!
2017-07-27 13:59:55,677 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-27 13:59:55,714 - test_cromwell - INFO - Workflow: {'id': '74e0af63-c828-4a55-b2dd-72b23089448e', 'status': 'Submitted'}
2017-07-27 13:59:57,716 - test_cromwell - INFO - Test done!
2017-07-28 08:24:05,095 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:24:05,236 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'a6ee122b-023a-4313-86e4-81bef9a014e1'}
2017-07-28 08:24:07,239 - test_cromwell - INFO - Testing query_logs...
2017-07-28 08:24:07,275 - test_cromwell - INFO - Result: {u'id': u'a6ee122b-023a-4313-86e4-81bef9a014e1'}
2017-07-28 08:24:07,276 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 08:24:07,332 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-28T08:24:03.667-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'a6ee122b-023a-4313-86e4-81bef9a014e1'}
2017-07-28 08:24:07,334 - test_cromwell - INFO - Testing query_status...
2017-07-28 08:24:07,364 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'a6ee122b-023a-4313-86e4-81bef9a014e1'}
2017-07-28 08:24:07,365 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 08:24:07,365 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:24:07,400 - test_cromwell - INFO - Test done!
2017-07-28 08:25:24,733 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:25:24,834 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'37c6dcfd-dd7d-414a-9247-f8425facd3f9'}
2017-07-28 08:25:26,838 - test_cromwell - INFO - Testing query_logs...
2017-07-28 08:25:26,869 - test_cromwell - INFO - Result: {u'id': u'37c6dcfd-dd7d-414a-9247-f8425facd3f9'}
2017-07-28 08:25:26,869 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 08:25:26,928 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-28T08:25:23.265-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'37c6dcfd-dd7d-414a-9247-f8425facd3f9'}
2017-07-28 08:25:26,930 - test_cromwell - INFO - Testing query_status...
2017-07-28 08:25:26,957 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'37c6dcfd-dd7d-414a-9247-f8425facd3f9'}
2017-07-28 08:25:26,957 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 08:25:26,957 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:25:26,983 - test_cromwell - INFO - Test done!
2017-07-28 08:27:46,756 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:27:46,864 - test_cromwell - INFO - Workflow: {'id': 'bc68e7c1-a7ae-434c-9307-4c79784fee46', 'status': 'Submitted'}
2017-07-28 08:27:48,866 - test_cromwell - INFO - Testing query_logs...
2017-07-28 08:27:48,900 - test_cromwell - INFO - Result: {'id': 'bc68e7c1-a7ae-434c-9307-4c79784fee46'}
2017-07-28 08:27:48,901 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 08:27:48,961 - test_cromwell - INFO - Result: {'id': 'bc68e7c1-a7ae-434c-9307-4c79784fee46', 'calls': {}, 'status': 'Submitted', 'submittedFiles': {'options': '{\n\n}', 'workflow': '# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}'}, 'submission': '2017-07-28T08:27:45.288-04:00', 'outputs': {}, 'inputs': {}}
2017-07-28 08:27:48,963 - test_cromwell - INFO - Testing query_status...
2017-07-28 08:27:48,993 - test_cromwell - INFO - Result: {'id': 'bc68e7c1-a7ae-434c-9307-4c79784fee46', 'status': 'Submitted'}
2017-07-28 08:27:48,994 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 08:27:48,995 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:27:49,026 - test_cromwell - INFO - Test done!
2017-07-28 08:28:07,572 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:28:07,672 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': 'a4af3f0e-8e3d-40ed-9bc7-08d65dce414a'}
2017-07-28 08:28:09,674 - test_cromwell - INFO - Testing query_logs...
2017-07-28 08:28:09,710 - test_cromwell - INFO - Result: {'id': 'a4af3f0e-8e3d-40ed-9bc7-08d65dce414a'}
2017-07-28 08:28:09,711 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 08:28:09,764 - test_cromwell - INFO - Result: {'status': 'Submitted', 'submittedFiles': {'options': '{\n\n}', 'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'workflow': '# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, 'calls': {}, 'id': 'a4af3f0e-8e3d-40ed-9bc7-08d65dce414a', 'outputs': {}, 'inputs': {}, 'submission': '2017-07-28T08:28:06.103-04:00'}
2017-07-28 08:28:09,766 - test_cromwell - INFO - Testing query_status...
2017-07-28 08:28:09,790 - test_cromwell - INFO - Result: {'status': 'Submitted', 'id': 'a4af3f0e-8e3d-40ed-9bc7-08d65dce414a'}
2017-07-28 08:28:09,791 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 08:28:09,792 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:28:09,822 - test_cromwell - INFO - Test done!
2017-07-28 08:28:55,078 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:28:55,175 - test_cromwell - INFO - Workflow: {'id': 'b24f6cb6-6183-4783-bc67-ed6b69482bcc', 'status': 'Submitted'}
2017-07-28 08:28:57,176 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:28:57,207 - test_cromwell - INFO - Test done!
2017-07-28 08:29:37,388 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:29:37,506 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': 'd7176047-b310-400e-848f-eb0eaaf920c0'}
2017-07-28 08:29:39,509 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:31:19,082 - test_cromwell - INFO - Test done!
2017-07-28 08:36:29,766 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:36:29,858 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'e322c352-5224-4648-91e7-be2c84a461e1'}
2017-07-28 08:36:31,861 - test_cromwell - INFO - Testing query_logs...
2017-07-28 08:36:31,894 - test_cromwell - INFO - Result: {u'id': u'e322c352-5224-4648-91e7-be2c84a461e1'}
2017-07-28 08:36:31,894 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 08:36:31,950 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-28T08:36:28.291-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'e322c352-5224-4648-91e7-be2c84a461e1'}
2017-07-28 08:36:31,951 - test_cromwell - INFO - Testing query_status...
2017-07-28 08:36:31,979 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'e322c352-5224-4648-91e7-be2c84a461e1'}
2017-07-28 08:36:31,980 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 08:36:31,980 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:36:32,006 - test_cromwell - INFO - Test done!
2017-07-28 08:53:43,124 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:53:43,369 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'cb98e7d2-8172-4050-ac0f-261e588debe2'}
2017-07-28 08:53:45,371 - test_cromwell - INFO - Testing query_logs...
2017-07-28 08:53:45,404 - test_cromwell - INFO - Result: {u'id': u'cb98e7d2-8172-4050-ac0f-261e588debe2'}
2017-07-28 08:53:45,404 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 08:53:45,461 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-28T08:53:41.803-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'cb98e7d2-8172-4050-ac0f-261e588debe2'}
2017-07-28 08:53:45,463 - test_cromwell - INFO - Testing query_status...
2017-07-28 08:53:45,492 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'cb98e7d2-8172-4050-ac0f-261e588debe2'}
2017-07-28 08:53:45,493 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 08:53:45,493 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:53:45,522 - test_cromwell - INFO - Test done!
2017-07-28 08:54:38,953 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 08:54:39,048 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'91e7e709-7e6c-49c5-b86a-b553208adad0'}
2017-07-28 08:54:41,049 - test_cromwell - INFO - Testing query_logs...
2017-07-28 08:54:41,081 - test_cromwell - INFO - Result: {u'id': u'91e7e709-7e6c-49c5-b86a-b553208adad0'}
2017-07-28 08:54:41,081 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 08:54:41,137 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-28T08:54:37.482-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'91e7e709-7e6c-49c5-b86a-b553208adad0'}
2017-07-28 08:54:41,138 - test_cromwell - INFO - Testing query_status...
2017-07-28 08:54:41,168 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'91e7e709-7e6c-49c5-b86a-b553208adad0'}
2017-07-28 08:54:41,170 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 08:54:41,170 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 08:54:41,204 - test_cromwell - INFO - Test done!
2017-07-28 09:09:36,801 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 09:09:36,905 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': 'b67a8de6-fde8-4e05-b1c2-cea409332d3a'}
2017-07-28 09:09:38,907 - test_cromwell - INFO - Testing query_logs...
2017-07-28 09:09:38,938 - test_cromwell - INFO - Result: {'id': 'b67a8de6-fde8-4e05-b1c2-cea409332d3a'}
2017-07-28 09:09:38,939 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 09:09:38,996 - test_cromwell - INFO - Result: {'outputs': {}, 'calls': {}, 'id': 'b67a8de6-fde8-4e05-b1c2-cea409332d3a', 'status': 'Submitted', 'inputs': {}, 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'options': '{\n\n}', 'workflow': '# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, 'submission': '2017-07-28T09:09:35.340-04:00'}
2017-07-28 09:09:38,998 - test_cromwell - INFO - Testing query_status...
2017-07-28 09:09:39,026 - test_cromwell - INFO - Result: {'status': 'Submitted', 'id': 'b67a8de6-fde8-4e05-b1c2-cea409332d3a'}
2017-07-28 09:09:39,027 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 09:09:39,028 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 09:09:39,057 - test_cromwell - INFO - Test done!
2017-07-28 09:12:59,128 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 09:12:59,248 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': '84f4f887-ff81-4067-888c-c82157d9db54'}
2017-07-28 09:13:01,252 - test_cromwell - INFO - Testing query_logs...
2017-07-28 09:13:01,286 - test_cromwell - INFO - Result: {'id': '84f4f887-ff81-4067-888c-c82157d9db54'}
2017-07-28 09:13:01,287 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 09:13:01,343 - test_cromwell - INFO - Result: {'inputs': {}, 'outputs': {}, 'status': 'Submitted', 'submittedFiles': {'workflow': '# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'options': '{\n\n}'}, 'id': '84f4f887-ff81-4067-888c-c82157d9db54', 'submission': '2017-07-28T09:12:57.682-04:00', 'calls': {}}
2017-07-28 09:13:01,345 - test_cromwell - INFO - Testing query_status...
2017-07-28 09:13:01,374 - test_cromwell - INFO - Result: {'status': 'Submitted', 'id': '84f4f887-ff81-4067-888c-c82157d9db54'}
2017-07-28 09:13:01,375 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 09:13:01,376 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 09:13:01,408 - test_cromwell - INFO - Result: {'status': 'Aborted', 'id': '84f4f887-ff81-4067-888c-c82157d9db54'}
2017-07-28 09:13:01,409 - test_cromwell - INFO - Test done!
2017-07-28 09:13:26,332 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 09:13:26,433 - test_cromwell - INFO - Workflow: {'id': '8197b7a3-2a45-4fcd-bd78-5b1d7d591ff0', 'status': 'Submitted'}
2017-07-28 09:13:28,434 - test_cromwell - INFO - Testing query_logs...
2017-07-28 09:13:28,469 - test_cromwell - INFO - Result: {'id': '8197b7a3-2a45-4fcd-bd78-5b1d7d591ff0'}
2017-07-28 09:13:28,470 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 09:13:28,531 - test_cromwell - INFO - Result: {'calls': {}, 'submission': '2017-07-28T09:13:24.868-04:00', 'inputs': {}, 'id': '8197b7a3-2a45-4fcd-bd78-5b1d7d591ff0', 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'workflow': '# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'options': '{\n\n}'}, 'outputs': {}, 'status': 'Submitted'}
2017-07-28 09:13:28,533 - test_cromwell - INFO - Testing query_status...
2017-07-28 09:13:28,563 - test_cromwell - INFO - Result: {'id': '8197b7a3-2a45-4fcd-bd78-5b1d7d591ff0', 'status': 'Submitted'}
2017-07-28 09:13:28,564 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 09:13:28,565 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 09:13:28,599 - test_cromwell - INFO - Result: {'id': '8197b7a3-2a45-4fcd-bd78-5b1d7d591ff0', 'status': 'Aborted'}
2017-07-28 09:13:28,600 - test_cromwell - INFO - Test done!
2017-07-28 09:16:36,607 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 09:16:36,707 - test_cromwell - INFO - Workflow: {'status': 'Submitted', 'id': '6bb9e63f-6d1d-4d0f-93e1-cf64ebbbc177'}
2017-07-28 09:16:38,708 - test_cromwell - INFO - Testing query_logs...
2017-07-28 09:16:38,742 - test_cromwell - INFO - Result: {'id': '6bb9e63f-6d1d-4d0f-93e1-cf64ebbbc177'}
2017-07-28 09:16:38,743 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 09:16:38,802 - test_cromwell - INFO - Result: {'submission': '2017-07-28T09:16:35.141-04:00', 'submittedFiles': {'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', 'options': '{\n\n}', 'workflow': '# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, 'status': 'Submitted', 'calls': {}, 'inputs': {}, 'id': '6bb9e63f-6d1d-4d0f-93e1-cf64ebbbc177', 'outputs': {}}
2017-07-28 09:16:38,804 - test_cromwell - INFO - Testing query_status...
2017-07-28 09:16:38,835 - test_cromwell - INFO - Result: {'status': 'Submitted', 'id': '6bb9e63f-6d1d-4d0f-93e1-cf64ebbbc177'}
2017-07-28 09:16:38,836 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 09:16:38,837 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 09:16:38,868 - test_cromwell - INFO - Test done!
2017-07-28 09:17:32,597 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 09:17:32,714 - test_cromwell - INFO - Workflow: {'id': '0c307f19-7a0e-4d42-ba0f-832844a5730d', 'status': 'Submitted'}
2017-07-28 09:17:34,716 - test_cromwell - INFO - Testing query_logs...
2017-07-28 09:17:34,751 - test_cromwell - INFO - Result: {'id': '0c307f19-7a0e-4d42-ba0f-832844a5730d'}
2017-07-28 09:17:34,752 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 09:17:34,807 - test_cromwell - INFO - Result: {'id': '0c307f19-7a0e-4d42-ba0f-832844a5730d', 'status': 'Submitted', 'submission': '2017-07-28T09:17:31.147-04:00', 'calls': {}, 'outputs': {}, 'submittedFiles': {'workflow': '# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}', 'options': '{\n\n}', 'inputs': '{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}'}, 'inputs': {}}
2017-07-28 09:17:34,809 - test_cromwell - INFO - Testing query_status...
2017-07-28 09:17:34,845 - test_cromwell - INFO - Result: {'status': 'Submitted', 'id': '0c307f19-7a0e-4d42-ba0f-832844a5730d'}
2017-07-28 09:17:34,846 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 09:17:34,846 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 09:17:34,879 - test_cromwell - INFO - Result: {'id': '0c307f19-7a0e-4d42-ba0f-832844a5730d', 'status': 'Aborted'}
2017-07-28 09:17:34,880 - test_cromwell - INFO - Test done!
2017-07-28 10:40:00,288 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-07-28 10:40:00,377 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'da146203-6bb8-4db8-b538-3b999bb30709'}
2017-07-28 10:40:02,378 - test_cromwell - INFO - Testing query_logs...
2017-07-28 10:40:02,415 - test_cromwell - INFO - Result: {u'id': u'da146203-6bb8-4db8-b538-3b999bb30709'}
2017-07-28 10:40:02,417 - test_cromwell - INFO - Testing query_metadata...
2017-07-28 10:40:02,471 - test_cromwell - INFO - Result: {u'status': u'Running', u'inputs': {}, u'end': u'2017-07-28T10:39:59.376-04:00', u'calls': {}, u'submission': u'2017-07-28T10:39:58.820-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'start': u'2017-07-28T10:39:59.323-04:00', u'id': u'da146203-6bb8-4db8-b538-3b999bb30709'}
2017-07-28 10:40:02,473 - test_cromwell - INFO - Testing query_status...
2017-07-28 10:40:02,499 - test_cromwell - INFO - Result: {u'status': u'Running', u'id': u'da146203-6bb8-4db8-b538-3b999bb30709'}
2017-07-28 10:40:02,500 - test_cromwell - INFO - Testing start_workflow...
2017-07-28 10:40:02,500 - test_cromwell - INFO - Testing stop_workflow...
2017-07-28 10:40:02,529 - test_cromwell - INFO - Result: {u'status': u'error', u'message': u"Couldn't abort da146203-6bb8-4db8-b538-3b999bb30709 because no workflow with that ID is in progress"}
2017-07-28 10:40:02,530 - test_cromwell - INFO - Test done!
2017-07-31 11:56:25,683 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 11:56:25,734 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'15734736-cf01-40dc-9552-7e354283f921'}
2017-07-31 11:56:27,736 - test_cromwell - INFO - Test done!
2017-07-31 11:58:06,635 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 11:58:06,683 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'71aa138d-fb26-4c7f-93b3-1907a0b099f5'}
2017-07-31 11:58:08,684 - test_cromwell - INFO - Test done!
2017-07-31 11:58:22,345 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 11:58:22,385 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'caa99844-197d-4fad-9f07-51aad1fa77b8'}
2017-07-31 11:58:24,387 - test_cromwell - INFO - Test done!
2017-07-31 12:00:13,213 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:00:13,256 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'2899330e-00ee-4164-b935-27a10ca92d4d'}
2017-07-31 12:00:15,259 - test_cromwell - INFO - Test done!
2017-07-31 12:00:33,676 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:00:33,717 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'74611319-68d0-484f-a65a-dd13e534e835'}
2017-07-31 12:00:35,720 - test_cromwell - INFO - Test done!
2017-07-31 12:00:50,704 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:00:50,759 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'e0c9db92-c4cc-42a5-9f64-dadd6dbf8912'}
2017-07-31 12:00:52,762 - test_cromwell - INFO - Test done!
2017-07-31 12:05:07,286 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:05:07,335 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'0bea2d02-48ff-4f9a-84ab-cccf9fadda63'}
2017-07-31 12:05:09,338 - test_cromwell - INFO - Test done!
2017-07-31 12:06:43,756 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:06:43,796 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'2c36541a-e0cc-43f6-9b0d-eb681bc10dab'}
2017-07-31 12:06:45,798 - test_cromwell - INFO - Test done!
2017-07-31 12:08:20,414 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:08:20,457 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'46c4513c-c735-4d09-9fae-6347cf6261b9'}
2017-07-31 12:08:22,459 - test_cromwell - INFO - Test done!
2017-07-31 12:08:57,671 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:08:57,713 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'bc591fcd-a1e4-41ae-bc6d-b489fa69f7b3'}
2017-07-31 12:08:59,716 - test_cromwell - INFO - Test done!
2017-07-31 12:09:08,763 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:09:08,802 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'd940641a-c770-45a3-9b17-cf603305875a'}
2017-07-31 12:09:10,805 - test_cromwell - INFO - Test done!
2017-07-31 12:10:43,276 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:10:43,315 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'c39993e7-4465-40ab-b064-fe3552ada6bc'}
2017-07-31 12:10:45,316 - test_cromwell - INFO - Test done!
2017-07-31 12:11:11,119 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:11:11,161 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'649a34b6-7313-472a-8522-14eaa7ceba24'}
2017-07-31 12:11:13,161 - test_cromwell - INFO - Test done!
2017-07-31 12:13:42,960 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:13:43,000 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'd5f3e677-8617-41ce-9e6c-f331bf4e2436'}
2017-07-31 12:13:45,000 - test_cromwell - INFO - Test done!
2017-07-31 12:15:05,400 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:15:05,447 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'cb1f8b13-a9a2-4502-b430-d1f4c726fc3f'}
2017-07-31 12:15:07,447 - test_cromwell - INFO - Test done!
2017-07-31 12:15:51,368 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:15:51,408 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'cdecdee9-f921-428f-98d1-bc9c65e00b92'}
2017-07-31 12:15:53,410 - test_cromwell - INFO - Test done!
2017-07-31 12:19:40,914 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:19:40,960 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'11cb90bd-0671-4297-a4cb-090361eae884'}
2017-07-31 12:19:42,961 - test_cromwell - INFO - Test done!
2017-07-31 12:20:37,293 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:20:37,358 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'2d86d058-eae0-4ae0-a620-d50c804b6992'}
2017-07-31 12:20:39,361 - test_cromwell - INFO - Test done!
2017-07-31 12:23:48,538 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:23:48,582 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'13a823b4-941f-41b8-a390-b54df6929034'}
2017-07-31 12:23:50,584 - test_cromwell - INFO - Test done!
2017-07-31 12:32:36,168 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:32:36,221 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'05b70a2c-25e1-4916-a783-4b2df6000d50'}
2017-07-31 12:32:38,223 - test_cromwell - INFO - Test done!
2017-07-31 12:33:17,385 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:33:17,430 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'a8cbf2e6-3b4e-4bcf-a030-d83469b765b0'}
2017-07-31 12:33:19,430 - test_cromwell - INFO - Test done!
2017-07-31 12:33:35,279 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:33:35,316 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'5dd84c62-4447-423a-b4e2-b9344d596243'}
2017-07-31 12:33:37,319 - test_cromwell - INFO - Test done!
2017-07-31 12:34:13,480 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:34:13,523 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'cc18560d-a47c-4783-af9c-741b646b78a0'}
2017-07-31 12:34:15,526 - test_cromwell - INFO - Test done!
2017-07-31 12:36:50,520 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:36:50,582 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'3ede0944-74ba-40bf-8d0b-2b1eedf8afac'}
2017-07-31 12:36:52,582 - test_cromwell - INFO - Test done!
2017-07-31 12:37:00,053 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:37:00,095 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'675cd02e-6f7a-4d48-8407-4e3b842f605c'}
2017-07-31 12:37:02,101 - test_cromwell - INFO - Test done!
2017-07-31 12:37:22,450 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:37:22,505 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'646f8a32-a815-4422-8036-75d215b5cec1'}
2017-07-31 12:37:24,506 - test_cromwell - INFO - Test done!
2017-07-31 12:38:00,661 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:38:00,707 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'0a1b312d-98f1-4b38-9510-32695e0175e0'}
2017-07-31 12:38:02,707 - test_cromwell - INFO - Test done!
2017-07-31 12:39:22,792 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:39:22,835 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'c50aa516-4bed-46ee-b591-c603b9769c5e'}
2017-07-31 12:39:24,836 - test_cromwell - INFO - Test done!
2017-07-31 12:40:15,510 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:40:15,559 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'81b7fc25-e093-48c6-8830-dbeced49ffdf'}
2017-07-31 12:40:17,561 - test_cromwell - INFO - Test done!
2017-07-31 12:40:28,194 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:40:28,246 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'e7d3e9df-b818-44ab-a758-e1c0eb324496'}
2017-07-31 12:40:30,246 - test_cromwell - INFO - Test done!
2017-07-31 12:41:31,779 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:41:31,821 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'de43249c-dbc8-43bf-891c-78f1bd7c576a'}
2017-07-31 12:41:33,822 - test_cromwell - INFO - Test done!
2017-07-31 12:43:03,293 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:43:03,345 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'677e6c83-7606-405b-af84-01ff9b026315'}
2017-07-31 12:43:05,345 - test_cromwell - INFO - Test done!
2017-07-31 12:43:36,315 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:43:36,371 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'd90bbfbd-8323-4960-8492-ea60da870d34'}
2017-07-31 12:43:38,375 - test_cromwell - INFO - Test done!
2017-07-31 12:44:05,440 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:44:05,482 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'd57c828e-60c6-41cb-8df4-6f9efabeb2d8'}
2017-07-31 12:44:07,483 - test_cromwell - INFO - Test done!
2017-07-31 12:44:27,410 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:44:27,453 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'418fcd27-a29b-4037-b4ca-6c5573cf5764'}
2017-07-31 12:44:29,453 - test_cromwell - INFO - Test done!
2017-07-31 12:44:49,608 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:44:49,651 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'a1cb773b-0c70-42fd-b301-d76d9e1df919'}
2017-07-31 12:44:51,651 - test_cromwell - INFO - Test done!
2017-07-31 12:45:24,388 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:45:24,433 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'0cf69a52-ff05-485a-b73f-03fc7539e248'}
2017-07-31 12:45:26,434 - test_cromwell - INFO - Test done!
2017-07-31 12:45:52,654 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:45:52,697 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'4ffc43b6-af12-46e3-bea8-3ca0e588c820'}
2017-07-31 12:45:54,697 - test_cromwell - INFO - Test done!
2017-07-31 12:46:14,571 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:46:14,611 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'42639c77-3d0c-409d-a6c4-f726957a50f2'}
2017-07-31 12:46:16,611 - test_cromwell - INFO - Test done!
2017-07-31 12:47:06,762 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:47:06,802 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'53394c43-13c7-48c9-940d-95bb609b6c2e'}
2017-07-31 12:47:08,803 - test_cromwell - INFO - Test done!
2017-07-31 12:48:10,174 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:48:10,223 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'5dd09444-e62b-47b5-86eb-73326d6a99a8'}
2017-07-31 12:48:12,223 - test_cromwell - INFO - Test done!
2017-07-31 12:48:29,124 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:48:29,173 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'6b643568-dc3c-4439-8a17-2f104d15a343'}
2017-07-31 12:48:31,174 - test_cromwell - INFO - Test done!
2017-07-31 12:49:26,119 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:49:26,161 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'221707f6-ea68-4874-9d84-41b89acb25ca'}
2017-07-31 12:49:28,163 - test_cromwell - INFO - Test done!
2017-07-31 12:49:51,453 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:49:51,506 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'6f692f44-e353-424c-98e0-8d698204f3b4'}
2017-07-31 12:51:07,470 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:51:07,530 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'32e46268-c7eb-492f-b83e-760538fdd6bf'}
2017-07-31 12:51:09,532 - test_cromwell - INFO - Test done!
2017-07-31 12:52:09,289 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:52:09,335 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'3d240803-c31e-484d-80b7-3573b00b3e8b'}
2017-07-31 12:52:11,336 - test_cromwell - INFO - Test done!
2017-07-31 12:55:03,184 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:55:03,230 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'e1bb29b8-4707-46b4-bb05-771f37b72fbe'}
2017-07-31 12:55:05,256 - test_cromwell - INFO - Test done!
2017-07-31 12:57:07,717 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:57:07,756 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'efe692ab-f782-44e6-8d21-c25a3e7f12ba'}
2017-07-31 12:57:09,779 - test_cromwell - INFO - Test done!
2017-07-31 12:59:31,095 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:59:31,132 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'ceb1297c-3157-4ae8-9338-120a75512e1e'}
2017-07-31 12:59:33,151 - test_cromwell - INFO - Test done!
2017-07-31 12:59:46,414 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 12:59:46,447 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'990b11b9-cd2a-410e-82e4-de9904295477'}
2017-07-31 12:59:48,463 - test_cromwell - INFO - Test done!
2017-07-31 14:03:55,515 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:03:55,558 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'00dd2903-06d7-4197-9dd3-8fbd1b01d448'}
2017-07-31 14:03:57,589 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:03:57,601 - test_cromwell - INFO - Result: {u'id': u'00dd2903-06d7-4197-9dd3-8fbd1b01d448'}
2017-07-31 14:03:57,601 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:03:57,619 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:03:55.639-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'00dd2903-06d7-4197-9dd3-8fbd1b01d448'}
2017-07-31 14:03:57,619 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:03:57,630 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'00dd2903-06d7-4197-9dd3-8fbd1b01d448'}
2017-07-31 14:03:57,631 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:03:57,631 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:03:57,650 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'00dd2903-06d7-4197-9dd3-8fbd1b01d448'}
2017-07-31 14:03:57,650 - test_cromwell - INFO - Test done!
2017-07-31 14:05:02,512 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:05:02,546 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'c5dc4bb7-87f6-4020-8c10-f7c01cb3631d'}
2017-07-31 14:05:04,562 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:05:04,579 - test_cromwell - INFO - Result: {u'id': u'c5dc4bb7-87f6-4020-8c10-f7c01cb3631d'}
2017-07-31 14:05:04,581 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:05:04,598 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:05:02.631-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'c5dc4bb7-87f6-4020-8c10-f7c01cb3631d'}
2017-07-31 14:05:04,599 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:05:04,609 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'c5dc4bb7-87f6-4020-8c10-f7c01cb3631d'}
2017-07-31 14:05:04,609 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:05:04,611 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:05:04,627 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'c5dc4bb7-87f6-4020-8c10-f7c01cb3631d'}
2017-07-31 14:05:04,627 - test_cromwell - INFO - Test done!
2017-07-31 14:05:37,207 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:05:37,240 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'c251eb0b-f8b2-43d9-b51e-fcc43de2afb8'}
2017-07-31 14:05:39,263 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:05:39,275 - test_cromwell - INFO - Result: {u'id': u'c251eb0b-f8b2-43d9-b51e-fcc43de2afb8'}
2017-07-31 14:05:39,276 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:05:39,293 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:05:37.327-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'c251eb0b-f8b2-43d9-b51e-fcc43de2afb8'}
2017-07-31 14:05:39,295 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:05:39,303 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'c251eb0b-f8b2-43d9-b51e-fcc43de2afb8'}
2017-07-31 14:05:39,305 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:05:39,305 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:05:39,338 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'c251eb0b-f8b2-43d9-b51e-fcc43de2afb8'}
2017-07-31 14:05:39,338 - test_cromwell - INFO - Test done!
2017-07-31 14:05:50,128 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:05:50,163 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'3ae08924-78c8-439c-8778-225229c4ebf1'}
2017-07-31 14:05:52,184 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:05:52,198 - test_cromwell - INFO - Result: {u'id': u'3ae08924-78c8-439c-8778-225229c4ebf1'}
2017-07-31 14:05:52,200 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:05:52,219 - test_cromwell - INFO - Result: {u'status': u'Failed', u'inputs': {}, u'end': u'2017-07-31T14:05:51.380-04:00', u'calls': {}, u'submission': u'2017-07-31T14:05:50.251-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'start': u'2017-07-31T14:05:51.325-04:00', u'failures': [{u'message': u'Workflow input processing failed', u'causedBy': [{u'message': u'Unable to load namespace from workflow: Failed to import workflow, no import sources provided.', u'causedBy': []}]}], u'id': u'3ae08924-78c8-439c-8778-225229c4ebf1'}
2017-07-31 14:05:52,220 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:05:52,230 - test_cromwell - INFO - Result: {u'status': u'Failed', u'id': u'3ae08924-78c8-439c-8778-225229c4ebf1'}
2017-07-31 14:05:52,232 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:05:52,232 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:05:52,243 - test_cromwell - INFO - Result: {u'status': u'error', u'message': u"Couldn't abort 3ae08924-78c8-439c-8778-225229c4ebf1 because no workflow with that ID is in progress"}
2017-07-31 14:05:52,243 - test_cromwell - INFO - Test done!
2017-07-31 14:06:20,069 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:06:20,108 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'b5eb1ed3-dd4d-4135-8ff8-18d77b4ffb58'}
2017-07-31 14:06:22,144 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:06:22,158 - test_cromwell - INFO - Result: {u'id': u'b5eb1ed3-dd4d-4135-8ff8-18d77b4ffb58'}
2017-07-31 14:06:22,161 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:06:22,180 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:06:20.199-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'b5eb1ed3-dd4d-4135-8ff8-18d77b4ffb58'}
2017-07-31 14:06:22,181 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:06:22,193 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'b5eb1ed3-dd4d-4135-8ff8-18d77b4ffb58'}
2017-07-31 14:06:22,194 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:06:22,196 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:06:22,224 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'b5eb1ed3-dd4d-4135-8ff8-18d77b4ffb58'}
2017-07-31 14:06:22,226 - test_cromwell - INFO - Test done!
2017-07-31 14:06:32,187 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:06:32,226 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'ad4c5662-3613-42c4-b213-3185431e49a4'}
2017-07-31 14:06:34,256 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:06:34,270 - test_cromwell - INFO - Result: {u'id': u'ad4c5662-3613-42c4-b213-3185431e49a4'}
2017-07-31 14:06:34,273 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:06:34,292 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:06:32.317-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'ad4c5662-3613-42c4-b213-3185431e49a4'}
2017-07-31 14:06:34,293 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:06:34,305 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'ad4c5662-3613-42c4-b213-3185431e49a4'}
2017-07-31 14:06:34,305 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:06:34,308 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:06:34,325 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'ad4c5662-3613-42c4-b213-3185431e49a4'}
2017-07-31 14:06:34,325 - test_cromwell - INFO - Test done!
2017-07-31 14:07:31,553 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:07:31,591 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'e9e21635-ef4c-488b-b357-b5209f95c1f0'}
2017-07-31 14:07:33,618 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:07:33,634 - test_cromwell - INFO - Result: {u'id': u'e9e21635-ef4c-488b-b357-b5209f95c1f0'}
2017-07-31 14:07:33,634 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:07:33,653 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:07:31.686-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'e9e21635-ef4c-488b-b357-b5209f95c1f0'}
2017-07-31 14:07:33,654 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:07:33,663 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'e9e21635-ef4c-488b-b357-b5209f95c1f0'}
2017-07-31 14:07:33,664 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:07:33,664 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:07:33,678 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'e9e21635-ef4c-488b-b357-b5209f95c1f0'}
2017-07-31 14:07:33,678 - test_cromwell - INFO - Test done!
2017-07-31 14:08:09,657 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:08:09,693 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'4063cce4-64b8-4610-93cd-6e785d2164bd'}
2017-07-31 14:08:11,716 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:08:11,729 - test_cromwell - INFO - Result: {u'id': u'4063cce4-64b8-4610-93cd-6e785d2164bd'}
2017-07-31 14:08:11,730 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:08:11,747 - test_cromwell - INFO - Result: {u'status': u'Running', u'inputs': {}, u'end': u'2017-07-31T14:08:11.549-04:00', u'calls': {}, u'submission': u'2017-07-31T14:08:09.792-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'start': u'2017-07-31T14:08:11.473-04:00', u'id': u'4063cce4-64b8-4610-93cd-6e785d2164bd'}
2017-07-31 14:08:11,747 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:08:11,757 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'4063cce4-64b8-4610-93cd-6e785d2164bd'}
2017-07-31 14:08:11,757 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:08:11,759 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:08:11,767 - test_cromwell - INFO - Result: {u'status': u'error', u'message': u"Couldn't abort 4063cce4-64b8-4610-93cd-6e785d2164bd because no workflow with that ID is in progress"}
2017-07-31 14:08:11,769 - test_cromwell - INFO - Test done!
2017-07-31 14:08:34,638 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:08:34,673 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'8b6c84c8-0181-459b-96f7-89dc8680ad0c'}
2017-07-31 14:08:36,694 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:08:36,707 - test_cromwell - INFO - Result: {u'id': u'8b6c84c8-0181-459b-96f7-89dc8680ad0c'}
2017-07-31 14:08:36,707 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:08:36,727 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:08:34.774-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'8b6c84c8-0181-459b-96f7-89dc8680ad0c'}
2017-07-31 14:08:36,729 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:08:36,739 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'8b6c84c8-0181-459b-96f7-89dc8680ad0c'}
2017-07-31 14:08:36,739 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:08:36,740 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:08:36,756 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'8b6c84c8-0181-459b-96f7-89dc8680ad0c'}
2017-07-31 14:08:36,756 - test_cromwell - INFO - Test done!
2017-07-31 14:09:13,686 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:09:13,721 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'6054e9ed-28a7-47e9-ac85-6400c3a62931'}
2017-07-31 14:09:15,744 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:09:15,757 - test_cromwell - INFO - Result: {u'id': u'6054e9ed-28a7-47e9-ac85-6400c3a62931'}
2017-07-31 14:09:15,759 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:09:15,776 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:09:13.826-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'6054e9ed-28a7-47e9-ac85-6400c3a62931'}
2017-07-31 14:09:15,776 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:09:15,788 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'6054e9ed-28a7-47e9-ac85-6400c3a62931'}
2017-07-31 14:09:15,789 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:09:15,789 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:09:15,803 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'6054e9ed-28a7-47e9-ac85-6400c3a62931'}
2017-07-31 14:09:15,805 - test_cromwell - INFO - Test done!
2017-07-31 14:09:33,111 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:09:33,144 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'f291a8fc-c6f4-4e90-a1d1-947da3edbe27'}
2017-07-31 14:09:35,165 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:09:35,178 - test_cromwell - INFO - Result: {u'id': u'f291a8fc-c6f4-4e90-a1d1-947da3edbe27'}
2017-07-31 14:09:35,178 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:09:35,197 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:09:33.249-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'f291a8fc-c6f4-4e90-a1d1-947da3edbe27'}
2017-07-31 14:09:35,197 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:09:35,207 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'f291a8fc-c6f4-4e90-a1d1-947da3edbe27'}
2017-07-31 14:09:35,209 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:09:35,209 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:09:35,226 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'f291a8fc-c6f4-4e90-a1d1-947da3edbe27'}
2017-07-31 14:09:35,227 - test_cromwell - INFO - Test done!
2017-07-31 14:09:57,788 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:09:57,822 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'3245f390-bc33-44e7-aed7-ac475a3c21a4'}
2017-07-31 14:09:59,848 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:09:59,859 - test_cromwell - INFO - Result: {u'id': u'3245f390-bc33-44e7-aed7-ac475a3c21a4'}
2017-07-31 14:09:59,861 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:09:59,878 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:09:57.929-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'3245f390-bc33-44e7-aed7-ac475a3c21a4'}
2017-07-31 14:09:59,880 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:09:59,888 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'3245f390-bc33-44e7-aed7-ac475a3c21a4'}
2017-07-31 14:09:59,888 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:09:59,890 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:09:59,905 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'3245f390-bc33-44e7-aed7-ac475a3c21a4'}
2017-07-31 14:09:59,907 - test_cromwell - INFO - Test done!
2017-07-31 14:10:45,279 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:10:45,315 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'd5e89627-82a7-4698-833b-a46eb80dab52'}
2017-07-31 14:10:47,351 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:10:47,362 - test_cromwell - INFO - Result: {u'id': u'd5e89627-82a7-4698-833b-a46eb80dab52'}
2017-07-31 14:10:47,364 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:10:47,382 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:10:45.425-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'd5e89627-82a7-4698-833b-a46eb80dab52'}
2017-07-31 14:10:47,382 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:10:47,394 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'd5e89627-82a7-4698-833b-a46eb80dab52'}
2017-07-31 14:10:47,394 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:10:47,394 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:10:47,410 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'd5e89627-82a7-4698-833b-a46eb80dab52'}
2017-07-31 14:10:47,410 - test_cromwell - INFO - Test done!
2017-07-31 14:11:58,375 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:11:58,414 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'1d0c848c-449a-4f28-963b-44893d394692'}
2017-07-31 14:12:00,447 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:12:00,460 - test_cromwell - INFO - Result: {u'id': u'1d0c848c-449a-4f28-963b-44893d394692'}
2017-07-31 14:12:00,461 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:12:00,480 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:11:58.525-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'1d0c848c-449a-4f28-963b-44893d394692'}
2017-07-31 14:12:00,480 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:12:00,490 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'1d0c848c-449a-4f28-963b-44893d394692'}
2017-07-31 14:12:00,490 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:12:00,492 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:12:00,509 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'1d0c848c-449a-4f28-963b-44893d394692'}
2017-07-31 14:12:00,510 - test_cromwell - INFO - Test done!
2017-07-31 14:13:00,845 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:13:00,881 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'2249bd81-6dba-4737-9815-fee55474d4d0'}
2017-07-31 14:13:02,914 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:13:02,926 - test_cromwell - INFO - Result: {u'id': u'2249bd81-6dba-4737-9815-fee55474d4d0'}
2017-07-31 14:13:02,926 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:13:02,944 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:13:00.985-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'2249bd81-6dba-4737-9815-fee55474d4d0'}
2017-07-31 14:13:02,944 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:13:02,953 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'2249bd81-6dba-4737-9815-fee55474d4d0'}
2017-07-31 14:13:02,954 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:13:02,956 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:13:02,971 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'2249bd81-6dba-4737-9815-fee55474d4d0'}
2017-07-31 14:13:02,971 - test_cromwell - INFO - Test done!
2017-07-31 14:13:49,190 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:13:49,223 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'8348ea0e-2ca6-4476-baa6-40e475be0b99'}
2017-07-31 14:13:51,250 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:13:51,265 - test_cromwell - INFO - Result: {u'id': u'8348ea0e-2ca6-4476-baa6-40e475be0b99'}
2017-07-31 14:13:51,265 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:13:51,282 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:13:49.320-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'8348ea0e-2ca6-4476-baa6-40e475be0b99'}
2017-07-31 14:13:51,283 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:13:51,293 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'8348ea0e-2ca6-4476-baa6-40e475be0b99'}
2017-07-31 14:13:51,295 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:13:51,295 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:13:51,309 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'8348ea0e-2ca6-4476-baa6-40e475be0b99'}
2017-07-31 14:13:51,311 - test_cromwell - INFO - Test done!
2017-07-31 14:14:56,076 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:14:56,109 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'446d79e9-f27e-468d-a96e-3ed53dedbb41'}
2017-07-31 14:14:58,140 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:14:58,151 - test_cromwell - INFO - Result: {u'id': u'446d79e9-f27e-468d-a96e-3ed53dedbb41'}
2017-07-31 14:14:58,151 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:14:58,168 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:14:56.199-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'446d79e9-f27e-468d-a96e-3ed53dedbb41'}
2017-07-31 14:14:58,168 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:14:58,178 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'446d79e9-f27e-468d-a96e-3ed53dedbb41'}
2017-07-31 14:14:58,178 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:14:58,180 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:14:58,194 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'446d79e9-f27e-468d-a96e-3ed53dedbb41'}
2017-07-31 14:14:58,194 - test_cromwell - INFO - Test done!
2017-07-31 14:15:30,885 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:15:30,921 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'68a7d79a-bede-499f-bc99-646690bc95bf'}
2017-07-31 14:15:32,947 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:15:32,960 - test_cromwell - INFO - Result: {u'id': u'68a7d79a-bede-499f-bc99-646690bc95bf'}
2017-07-31 14:15:32,960 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:15:32,977 - test_cromwell - INFO - Result: {u'status': u'Running', u'inputs': {}, u'end': u'2017-07-31T14:15:31.970-04:00', u'calls': {}, u'submission': u'2017-07-31T14:15:31.007-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'start': u'2017-07-31T14:15:31.914-04:00', u'id': u'68a7d79a-bede-499f-bc99-646690bc95bf'}
2017-07-31 14:15:32,977 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:15:32,987 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'68a7d79a-bede-499f-bc99-646690bc95bf'}
2017-07-31 14:15:32,987 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:15:32,989 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:15:32,997 - test_cromwell - INFO - Result: {u'status': u'error', u'message': u"Couldn't abort 68a7d79a-bede-499f-bc99-646690bc95bf because no workflow with that ID is in progress"}
2017-07-31 14:15:32,999 - test_cromwell - INFO - Test done!
2017-07-31 14:15:56,615 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:15:56,648 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'58f1759c-22e6-4fd6-aaae-aef0a79382c8'}
2017-07-31 14:15:58,676 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:15:58,687 - test_cromwell - INFO - Result: {u'id': u'58f1759c-22e6-4fd6-aaae-aef0a79382c8'}
2017-07-31 14:15:58,687 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:15:58,704 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:15:56.731-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'58f1759c-22e6-4fd6-aaae-aef0a79382c8'}
2017-07-31 14:15:58,706 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:15:58,714 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'58f1759c-22e6-4fd6-aaae-aef0a79382c8'}
2017-07-31 14:15:58,714 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:15:58,716 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:15:58,730 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'58f1759c-22e6-4fd6-aaae-aef0a79382c8'}
2017-07-31 14:15:58,730 - test_cromwell - INFO - Test done!
2017-07-31 14:16:20,042 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:16:20,079 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'7c8d7865-a7f1-42c6-9b49-44e626d6b252'}
2017-07-31 14:16:22,111 - test_cromwell - INFO - Testing query_logs...
2017-07-31 14:16:22,121 - test_cromwell - INFO - Result: {u'id': u'7c8d7865-a7f1-42c6-9b49-44e626d6b252'}
2017-07-31 14:16:22,122 - test_cromwell - INFO - Testing query_metadata...
2017-07-31 14:16:22,140 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-07-31T14:16:20.158-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'7c8d7865-a7f1-42c6-9b49-44e626d6b252'}
2017-07-31 14:16:22,141 - test_cromwell - INFO - Testing query_status...
2017-07-31 14:16:22,150 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'7c8d7865-a7f1-42c6-9b49-44e626d6b252'}
2017-07-31 14:16:22,151 - test_cromwell - INFO - Testing start_workflow...
2017-07-31 14:16:22,151 - test_cromwell - INFO - Testing stop_workflow...
2017-07-31 14:16:22,167 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'7c8d7865-a7f1-42c6-9b49-44e626d6b252'}
2017-07-31 14:16:22,168 - test_cromwell - INFO - Test done!
2017-07-31 14:22:17,398 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:22:17,434 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'aa56f7e1-66f6-4740-b556-a1191b310dbe'}
2017-07-31 14:22:19,444 - test_cromwell - INFO - Test done!
2017-07-31 14:23:11,963 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-07-31 14:23:11,997 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'597ff5a9-f677-4d89-9735-2e6dfc006f3b'}
2017-07-31 14:23:14,005 - test_cromwell - INFO - Test done!
2017-08-02 10:05:26,525 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-02 10:05:26,582 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'644df557-26e9-4ae7-b0b7-41f9cadbfdb8'}
2017-08-02 10:05:28,618 - test_cromwell - INFO - Testing query_logs...
2017-08-02 10:05:28,631 - test_cromwell - INFO - Result: {u'id': u'644df557-26e9-4ae7-b0b7-41f9cadbfdb8'}
2017-08-02 10:05:28,632 - test_cromwell - INFO - Testing query_metadata...
2017-08-02 10:05:28,657 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-02T10:05:26.459-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'644df557-26e9-4ae7-b0b7-41f9cadbfdb8'}
2017-08-02 10:05:28,658 - test_cromwell - INFO - Testing query_status...
2017-08-02 10:05:28,670 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'644df557-26e9-4ae7-b0b7-41f9cadbfdb8'}
2017-08-02 10:05:28,670 - test_cromwell - INFO - Testing start_workflow...
2017-08-02 10:05:28,671 - test_cromwell - INFO - Testing stop_workflow...
2017-08-02 10:05:28,707 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'644df557-26e9-4ae7-b0b7-41f9cadbfdb8'}
2017-08-02 10:05:28,709 - test_cromwell - INFO - Test done!
2017-08-02 10:06:32,714 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-02 10:06:32,757 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'5a56169e-9259-451e-b635-a48179698d5a'}
2017-08-02 10:06:34,799 - test_cromwell - INFO - Testing query_logs...
2017-08-02 10:06:34,812 - test_cromwell - INFO - Result: {u'id': u'5a56169e-9259-451e-b635-a48179698d5a'}
2017-08-02 10:06:34,812 - test_cromwell - INFO - Testing query_metadata...
2017-08-02 10:06:34,829 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-02T10:06:32.637-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'5a56169e-9259-451e-b635-a48179698d5a'}
2017-08-02 10:06:34,831 - test_cromwell - INFO - Testing query_status...
2017-08-02 10:06:34,841 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'5a56169e-9259-451e-b635-a48179698d5a'}
2017-08-02 10:06:34,841 - test_cromwell - INFO - Testing start_workflow...
2017-08-02 10:06:34,842 - test_cromwell - INFO - Testing stop_workflow...
2017-08-02 10:06:34,875 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'5a56169e-9259-451e-b635-a48179698d5a'}
2017-08-02 10:06:34,877 - test_cromwell - INFO - Test done!
2017-08-02 10:07:46,163 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-02 10:07:46,198 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'5553b489-4ebe-44b0-846b-65337a519491'}
2017-08-02 10:07:48,232 - test_cromwell - INFO - Testing query_logs...
2017-08-02 10:07:48,246 - test_cromwell - INFO - Result: {u'id': u'5553b489-4ebe-44b0-846b-65337a519491'}
2017-08-02 10:07:48,246 - test_cromwell - INFO - Testing query_metadata...
2017-08-02 10:07:48,263 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-02T10:07:46.076-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'5553b489-4ebe-44b0-846b-65337a519491'}
2017-08-02 10:07:48,265 - test_cromwell - INFO - Testing query_status...
2017-08-02 10:07:48,273 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'5553b489-4ebe-44b0-846b-65337a519491'}
2017-08-02 10:07:48,275 - test_cromwell - INFO - Testing start_workflow...
2017-08-02 10:07:48,275 - test_cromwell - INFO - Testing stop_workflow...
2017-08-02 10:07:48,292 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'5553b489-4ebe-44b0-846b-65337a519491'}
2017-08-02 10:07:48,292 - test_cromwell - INFO - Test done!
2017-08-02 10:08:24,023 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-02 10:08:24,061 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'7d56cd4f-85de-430c-88ff-5e83d56ac1fb'}
2017-08-02 10:08:26,099 - test_cromwell - INFO - Testing query_logs...
2017-08-02 10:08:26,111 - test_cromwell - INFO - Result: {u'id': u'7d56cd4f-85de-430c-88ff-5e83d56ac1fb'}
2017-08-02 10:08:26,111 - test_cromwell - INFO - Testing query_metadata...
2017-08-02 10:08:26,128 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-02T10:08:23.938-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'7d56cd4f-85de-430c-88ff-5e83d56ac1fb'}
2017-08-02 10:08:26,130 - test_cromwell - INFO - Testing query_status...
2017-08-02 10:08:26,138 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'7d56cd4f-85de-430c-88ff-5e83d56ac1fb'}
2017-08-02 10:08:26,141 - test_cromwell - INFO - Testing start_workflow...
2017-08-02 10:08:26,142 - test_cromwell - INFO - Testing stop_workflow...
2017-08-02 10:08:26,157 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'7d56cd4f-85de-430c-88ff-5e83d56ac1fb'}
2017-08-02 10:08:26,157 - test_cromwell - INFO - Test done!
2017-08-02 10:15:34,111 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-02 10:15:34,148 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'0a756aa2-e5fe-4b02-8f21-956a13ebf2b3'}
2017-08-02 10:15:36,157 - test_cromwell - INFO - Test done!
2017-08-02 10:22:14,506 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-02 10:22:14,542 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'4bec5af7-8570-4b85-81f0-ae906f9d31eb'}
2017-08-02 10:22:16,551 - test_cromwell - INFO - Test done!
2017-08-02 12:41:43,176 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-02 12:41:43,210 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'1f3bd077-16ac-4bab-86cb-279f314ac9d1'}
2017-08-02 12:41:45,256 - test_cromwell - INFO - Testing query_logs...
2017-08-02 12:41:45,267 - test_cromwell - INFO - Result: {u'id': u'1f3bd077-16ac-4bab-86cb-279f314ac9d1'}
2017-08-02 12:41:45,267 - test_cromwell - INFO - Testing query_metadata...
2017-08-02 12:41:45,285 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-02T12:41:42.871-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'1f3bd077-16ac-4bab-86cb-279f314ac9d1'}
2017-08-02 12:41:45,286 - test_cromwell - INFO - Testing query_status...
2017-08-02 12:41:45,296 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'1f3bd077-16ac-4bab-86cb-279f314ac9d1'}
2017-08-02 12:41:45,296 - test_cromwell - INFO - Testing start_workflow...
2017-08-02 12:41:45,298 - test_cromwell - INFO - Testing stop_workflow...
2017-08-02 12:41:45,312 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'1f3bd077-16ac-4bab-86cb-279f314ac9d1'}
2017-08-02 12:42:07,676 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-02 12:42:07,713 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'1ba526cd-2643-4e37-bffe-0058f45f9ffb'}
2017-08-02 12:42:09,750 - test_cromwell - INFO - Testing query_logs...
2017-08-02 12:42:09,760 - test_cromwell - INFO - Result: {u'id': u'1ba526cd-2643-4e37-bffe-0058f45f9ffb'}
2017-08-02 12:42:09,762 - test_cromwell - INFO - Testing query_metadata...
2017-08-02 12:42:09,779 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-02T12:42:07.372-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'1ba526cd-2643-4e37-bffe-0058f45f9ffb'}
2017-08-02 12:42:09,780 - test_cromwell - INFO - Testing query_status...
2017-08-02 12:42:09,789 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'1ba526cd-2643-4e37-bffe-0058f45f9ffb'}
2017-08-02 12:42:09,790 - test_cromwell - INFO - Testing start_workflow...
2017-08-02 12:42:09,792 - test_cromwell - INFO - Testing stop_workflow...
2017-08-02 12:42:09,809 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'1ba526cd-2643-4e37-bffe-0058f45f9ffb'}
2017-08-02 12:42:09,811 - test_cromwell - INFO - Test done!
2017-08-03 10:41:19,973 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-03 10:41:20,010 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'6efb8f0a-6327-424a-80c5-7c0d94a74373'}
2017-08-03 10:41:22,030 - test_cromwell - INFO - Test done!
2017-08-03 10:41:35,867 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-03 10:41:35,901 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'9fc870cc-ec1b-4094-8987-bc8664d6a580'}
2017-08-03 10:41:37,934 - test_cromwell - INFO - Test done!
2017-08-03 10:56:28,974 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-03 10:56:29,009 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'7ffcfa23-ba22-4a0b-b099-41c00af80593'}
2017-08-03 10:56:31,026 - test_cromwell - INFO - Test done!
2017-08-03 11:37:07,750 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-03 11:37:07,786 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'8f129f7c-e4f7-4914-ad10-84a5d9465698'}
2017-08-03 11:37:09,828 - test_cromwell - INFO - Testing query_logs...
2017-08-03 11:37:09,839 - test_cromwell - INFO - Result: {u'id': u'8f129f7c-e4f7-4914-ad10-84a5d9465698'}
2017-08-03 11:37:09,839 - test_cromwell - INFO - Testing query_metadata...
2017-08-03 11:37:09,858 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-03T11:37:07.656-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'8f129f7c-e4f7-4914-ad10-84a5d9465698'}
2017-08-03 11:37:09,858 - test_cromwell - INFO - Testing query_status...
2017-08-03 11:37:09,868 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'8f129f7c-e4f7-4914-ad10-84a5d9465698'}
2017-08-03 11:37:09,868 - test_cromwell - INFO - Testing start_workflow...
2017-08-03 11:37:09,868 - test_cromwell - INFO - Testing stop_workflow...
2017-08-03 11:37:09,881 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'8f129f7c-e4f7-4914-ad10-84a5d9465698'}
2017-08-03 11:37:09,882 - test_cromwell - INFO - Test done!
2017-08-03 14:26:06,940 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-08-03 14:26:07,055 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'120a11f4-d966-4895-9116-05fb90f41965'}
2017-08-03 14:26:09,141 - test_cromwell - INFO - Testing query_logs...
2017-08-03 14:26:09,174 - test_cromwell - INFO - Result: {u'id': u'120a11f4-d966-4895-9116-05fb90f41965'}
2017-08-03 14:26:09,174 - test_cromwell - INFO - Testing query_metadata...
2017-08-03 14:26:09,224 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-03T14:26:06.183-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'120a11f4-d966-4895-9116-05fb90f41965'}
2017-08-03 14:26:09,226 - test_cromwell - INFO - Testing query_status...
2017-08-03 14:26:09,246 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'120a11f4-d966-4895-9116-05fb90f41965'}
2017-08-03 14:26:09,247 - test_cromwell - INFO - Testing start_workflow...
2017-08-03 14:26:09,249 - test_cromwell - INFO - Testing stop_workflow...
2017-08-03 14:26:09,280 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'120a11f4-d966-4895-9116-05fb90f41965'}
2017-08-03 14:26:09,282 - test_cromwell - INFO - Test done!
2017-08-07 08:03:38,423 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-08-07 08:03:38,496 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'6b28504f-5b48-4d14-be70-c30fc8651aac'}
2017-08-07 08:03:40,575 - test_cromwell - INFO - Testing query_logs...
2017-08-07 08:03:40,589 - test_cromwell - INFO - Result: {u'id': u'6b28504f-5b48-4d14-be70-c30fc8651aac'}
2017-08-07 08:03:40,591 - test_cromwell - INFO - Testing query_metadata...
2017-08-07 08:03:40,644 - test_cromwell - INFO - Result: {u'status': u'Running', u'inputs': {}, u'end': u'2017-08-07T08:03:39.480-04:00', u'calls': {}, u'submission': u'2017-08-07T08:03:38.072-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'start': u'2017-08-07T08:03:39.392-04:00', u'id': u'6b28504f-5b48-4d14-be70-c30fc8651aac'}
2017-08-07 08:03:40,647 - test_cromwell - INFO - Testing query_status...
2017-08-07 08:03:40,674 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'6b28504f-5b48-4d14-be70-c30fc8651aac'}
2017-08-07 08:03:40,676 - test_cromwell - INFO - Testing start_workflow...
2017-08-07 08:03:40,677 - test_cromwell - INFO - Testing stop_workflow...
2017-08-07 08:03:40,714 - test_cromwell - INFO - Result: {u'status': u'error', u'message': u"Couldn't abort 6b28504f-5b48-4d14-be70-c30fc8651aac because no workflow with that ID is in progress"}
2017-08-07 08:03:40,714 - test_cromwell - INFO - Test done!
2017-08-11 14:52:19,078 - test_cromwell - INFO - Resources: D:\Dev\Python\widdler\resources\test.wdl, D:\Dev\Python\widdler\resources\test.json
2017-08-11 14:52:19,378 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'8cba2545-0765-4d04-a13b-744a6b7f0a7d'}
2017-08-11 14:52:21,487 - test_cromwell - INFO - Testing query_logs...
2017-08-11 14:52:21,519 - test_cromwell - INFO - Result: {u'id': u'8cba2545-0765-4d04-a13b-744a6b7f0a7d'}
2017-08-11 14:52:21,519 - test_cromwell - INFO - Testing query_metadata...
2017-08-11 14:52:21,578 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-08-11T14:52:08.836-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"Osiris","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\nimport "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n        call sub.hc_scatter {\r\n            input:\r\n            intervals = CreateIntervalsList.out,\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            bqsr_recal_report = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n            }\r\n            output {\r\n                String hc_scatter_output = hc_scatter.vcf\r\n            }\r\n\r\n#        call HaplotypeCaller {\r\n#            input:\r\n#            gatk = gatk,\r\n#            ref = CheckIndex.out,\r\n#            sample_name = sample[0],\r\n#            sample_dir = MakeSampleDir.out,\r\n#            in_bam = hc_bam,\r\n#            intervals = CreateIntervalsList.out,\r\n#            bqsr_file = bqsr_recal_report,\r\n#            ploidy = ploidy,\r\n#            erc = erc,\r\n#            extra_hc_params = extra_hc_params\r\n#        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'8cba2545-0765-4d04-a13b-744a6b7f0a7d'}
2017-08-11 14:52:21,579 - test_cromwell - INFO - Testing query_status...
2017-08-11 14:52:21,608 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'8cba2545-0765-4d04-a13b-744a6b7f0a7d'}
2017-08-11 14:52:21,608 - test_cromwell - INFO - Testing start_workflow...
2017-08-11 14:52:21,609 - test_cromwell - INFO - Testing stop_workflow...
2017-08-11 14:52:21,644 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'8cba2545-0765-4d04-a13b-744a6b7f0a7d'}
2017-08-11 14:52:21,645 - test_cromwell - INFO - Test done!
2017-09-06 09:34:34,835 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-09-06 09:34:34,987 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'4d74ac97-820e-43d4-92a8-b7c618c7bb93'}
2017-09-06 09:34:37,039 - test_cromwell - INFO - Testing query_logs...
2017-09-06 09:34:37,049 - test_cromwell - INFO - Result: {u'id': u'4d74ac97-820e-43d4-92a8-b7c618c7bb93'}
2017-09-06 09:34:37,049 - test_cromwell - INFO - Testing query_metadata...
2017-09-06 09:34:37,066 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-09-06T09:34:34.309-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.clean":true,"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\n#import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'4d74ac97-820e-43d4-92a8-b7c618c7bb93'}
2017-09-06 09:34:37,068 - test_cromwell - INFO - Testing query_status...
2017-09-06 09:34:37,078 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'4d74ac97-820e-43d4-92a8-b7c618c7bb93'}
2017-09-06 09:34:37,078 - test_cromwell - INFO - Testing start_workflow...
2017-09-06 09:34:37,078 - test_cromwell - INFO - Testing stop_workflow...
2017-09-06 09:34:37,099 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'4d74ac97-820e-43d4-92a8-b7c618c7bb93'}
2017-09-06 09:34:37,099 - test_cromwell - INFO - Test done!
2017-09-06 09:35:44,331 - test_cromwell - INFO - Resources: C:\Dev\Python\widdler\resources\test.wdl, C:\Dev\Python\widdler\resources\test.json
2017-09-06 09:35:44,368 - test_cromwell - INFO - Workflow: {u'status': u'Submitted', u'id': u'6b6bd1c5-f1fc-44e6-bf24-0e0bace07670'}
2017-09-06 09:35:46,403 - test_cromwell - INFO - Testing query_logs...
2017-09-06 09:35:46,413 - test_cromwell - INFO - Result: {u'id': u'6b6bd1c5-f1fc-44e6-bf24-0e0bace07670'}
2017-09-06 09:35:46,413 - test_cromwell - INFO - Testing query_metadata...
2017-09-06 09:35:46,430 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'inputs': {}, u'calls': {}, u'submission': u'2017-09-06T09:35:43.687-04:00', u'outputs': {}, u'submittedFiles': {u'inputs': u'{"gatk.clean":true,"gatk.snpeff":"/cil/shed/apps/external/snpEff/snpEff-4.1g/snpEff.jar","gatk.use_snpeff":true,"gatk.ref_file":"Plasmodium_falciparum_3D7.fasta","gatk.bqsr":true,"gatk.all_sites":true,"gatk.output_dir":"/cil/shed/sandboxes/amr/dev/gatk_pipeline/output/pfal_5","gatk.ts_filter_snp":99.5,"gatk.indel_resource":["7g8_gb4,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=12.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.mq_cap_snp":70,"gatk.indel_annotation":["QD","MQ","FS"],"gatk.snpeff_db":"Pf3D7v90","gatk.picard":"/cil/shed/apps/external/picard/current/bin/picard.jar","gatk.interval_size":1.5,"gatk.snp_annotation":["QD","MQ","FS","SOR","DP"],"gatk.filter_expression":"\'VQSLOD <= 0.0\'","gatk.variant_filtration":true,"gatk.samples_file":"C:\\\\Dev\\\\Python\\\\widdler\\\\resources\\\\test.tsv","gatk.gatk_3_7":"/humgen/gsa-hpprojects/GATK/bin/current/GenomeAnalysisTK.jar","gatk.known_sites":["/gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","/gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"],"gatk.indel_max_gaussians":4,"gatk.snp_max_gaussians":5,"gatk.ref_path":"/seq/references/Plasmodium_falciparum_3D7/v4/","gatk.snpeff_extra_params":"-noStats -noLogs -treatAllAsProteinCoding false","gatk.mq_cap_indel":70,"gatk.tcir":true,"gatk.ts_filter_indel":99.0,"user":"amr","gatk.vqsr":true,"gatk.ploidy":2,"gatk.snp_resource":["7g8_gb4,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/7g8_gb4.combined.final.vcf.gz","hb3_dd2,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/hb3_dd2.combined.final.vcf.gz","3d7_hb3,known=false,training=true,truth=true,prior=15.0 /gsap/garage-protistvector/U19_Aim4/Pf3K/3d7_hb3.combined.final.vcf.gz"]}', u'options': u'{\n\n}', u'workflow': u'# GATK WDL V1.0\r\n#import "hc_scatter.wdl" as sub\r\n\r\ntask VersionCheck {\r\n    String gatk\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/version_check/version_check.py -i "java -jar ${gatk} --version"\r\n    } output {\r\n        String out = "done"\r\n    }\r\n}\r\n\r\ntask MakeOutputDir {\r\n    String go\r\n    String output_dir\r\n    command {\r\n        mkdir -p ${output_dir}\r\n    }\r\n    output {\r\n        String out = output_dir\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask CheckIndex {\r\n    String output_dir\r\n    String ref_file\r\n    String out_file = sub(ref_file, "\\\\.fa*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    command {\r\n        python -c "import os; print ( \'0\' if os.path.isfile(\'${seq_dict}\') else \'1\')"\r\n    }\r\n    output {\r\n        Int retcode = read_int(stdout())\r\n        String out = "${output_dir}/${ref_file}"\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        ref_file: "The reference fasta file name (without the path)."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n    }\r\n}\r\n\r\ntask IndexReference {\r\n    String ref_path\r\n    String ref_file\r\n    String picard\r\n    String output_dir\r\n    String out_file = sub(ref_file, "\\\\.fasta*$", ".dict")\r\n    String seq_dict = "${output_dir}/${out_file}"\r\n    String old_ref = "${ref_path}/${ref_file}"\r\n    String ref = "${output_dir}/${ref_file}"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        cp ${old_ref} ${ref}\r\n        use BWA\r\n        bwa index ${ref}\r\n        use Samtools\r\n        samtools faidx ${ref}\r\n        rm ${seq_dict}\r\n        java -jar ${picard} CreateSequenceDictionary REFERENCE=${ref} O=${seq_dict}\r\n    }\r\n    output {\r\n        String out = ref\r\n    }\r\n    parameter_meta {\r\n        ref_path: "The file path to the directory containing the reference file."\r\n        ref_file: "The name of the reference file (without the path)."\r\n        picard: "The path to the picard executable jar file."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The seq dict filename must be generated and is used to construct seq_dict"\r\n        seq_dict: "The sequence dictionary created by Picard CreateSequenceDictionary"\r\n        old_ref: "The full path to the original reference file location."\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n    }\r\n}\r\n\r\ntask CreateIntervalsList {\r\n    String ref\r\n    Float interval_size\r\n    String output_dir\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Python-2.7\r\n        python /cil/shed/apps/internal/IntervalsCreator/intervals_creator.py -r ${ref} \\\r\n        -i ${interval_size} > ${output_dir}/intervals.list\r\n    }\r\n    output{\r\n        String out = "${output_dir}/intervals.list"\r\n    }\r\n    parameter_meta {\r\n        ref: "The absolute path of the reference file to be used by the workflow."\r\n        interval_size: "The size in gigabases that each interval should approximate."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n    }\r\n}\r\n\r\ntask MakeDir {\r\n    String output_dir\r\n    String sample_name\r\n    command {\r\n        mkdir -p ${output_dir}/${sample_name}\r\n    }\r\n    output {\r\n        String out = "${output_dir}/${sample_name}/"\r\n        String sample = sample_name\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask GenerateFastqNames {\r\n    String sample_dir\r\n    String sample_name\r\n    command {\r\n        echo "GenerateFastqNames: ${sample_dir}/${sample_name}.1.fq, ${sample_dir}/${sample_name}.2.fq"\r\n    }\r\n    output {\r\n        Array[String] fastq_out= ["${sample_dir}/${sample_name}.1.fq", "${sample_dir}/${sample_name}.2.fq"]\r\n    }\r\n    parameter_meta {\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n    }\r\n}\r\n\r\ntask SamToFastq {\r\n    String picard\r\n    String in_bam\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq1 = "${sample_dir}/${sample_name}.1.fq"\r\n    String out_fq2 = "${sample_dir}/${sample_name}.2.fq"\r\n    command {\r\n        java -Xmx12G -jar ${picard} SamToFastq INPUT=${in_bam} FASTQ=${out_fq1} SECOND_END_FASTQ=${out_fq2} VALIDATION_STRINGENCY=LENIENT\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        in_bam: "The bam file to convert to fastq."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq1: "The fastq file containing the first read of each pair."\r\n        out_fq2: "The fastq file containing the second read of each pair"\r\n    }\r\n}\r\n\r\ntask CopyFastq {\r\n    String fq\r\n    Int pair\r\n    String sample_name\r\n    String sample_dir\r\n    String out_fq = "${sample_dir}/${sample_name}.${pair}.fq"\r\n    command {\r\n        cp ${fq} ${out_fq}\r\n    }\r\n    parameter_meta {\r\n        fq: "The fastq file to copy."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        out_fq: "the absolute path of the copied fastq file."\r\n    }\r\n}\r\n\r\ntask AlignBAM {\r\n    String ref\r\n    String sample_dir\r\n    String sample_name\r\n    Array[String] fq_array\r\n    String read_group = "\'@RG\\\\tID:FLOWCELL_${sample_name}\\\\tSM:${sample_name}\\\\tPL:ILLUMINA\\\\tLB:LIB_${sample_name}\'"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use BWA\r\n        bwa mem -t 8 -R ${read_group} ${ref} ${fq_array[0]} ${fq_array[1]} > ${sample_dir}${sample_name}.aligned.sam\r\n    }\r\n    output {\r\n        String aligned_sam = "${sample_dir}/${sample_name}.aligned.sam"\r\n    }\r\n    parameter_meta {\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        fq_array: "An array containing the paths to the first and second fastq files."\r\n        read_group: "The read group string that will be included in the bam header."\r\n    }\r\n}\r\n\r\ntask SortSAM {\r\n    String picard\r\n    String aligned_sam\r\n    String sample_dir\r\n    String out_bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} SortSam I=${aligned_sam} O=${out_bam} SO=coordinate\r\n    }\r\n    output {\r\n        String bam = sub(aligned_sam, "\\\\.sam*$", ".sorted.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        aligned_sam: "The sam file to be sorted."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        out_bam: "The sorted bam file."\r\n    }\r\n}\r\n\r\ntask MarkDuplicates {\r\n    String picard\r\n    String sorted_bam\r\n    String out_bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    String metrics = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.metrics")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} MarkDuplicates I=${sorted_bam} O=${out_bam} M=${metrics}\r\n    }\r\n    output {\r\n        String bam = sub(sorted_bam, "\\\\.bam*$", ".marked_duplicates.bam")\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        sorted_bam: "The sorted bam file to mark duplicates on."\r\n        out_bam: "The bam file where duplicates are marked."\r\n        metrics: "The marked duplicates metrics file."\r\n    }\r\n}\r\n\r\ntask ReorderSAM {\r\n    String picard\r\n    String marked_bam\r\n    String out_bam = sub(marked_bam, "\\\\.bam*$", ".reordered.bam")\r\n    String ref\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${picard} ReorderSam I=${marked_bam} O=${out_bam} R=${ref}\r\n    }\r\n    output {\r\n        String bam = out_bam\r\n    }\r\n    parameter_meta {\r\n        picard: "The absolute path to the picard jar to execute."\r\n        marked_bam: "The bam file where duplicates are marked."\r\n        out_bam: "The reordered bam file."\r\n        ref: "fasta file of reference genome"\r\n    }\r\n}\r\n\r\ntask IndexBAM {\r\n    String reordered_bam\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Samtools\r\n        samtools index ${reordered_bam}\r\n    }\r\n    output {\r\n       String bam = reordered_bam\r\n    }\r\n    parameter_meta {\r\n        reordered_bam: "the reordered bam file to be indexed."\r\n    }\r\n}\r\n\r\ntask RealignerTargetCreator {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String out = sub(in_bam, "\\\\.bam*$", ".interval_list")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} -T RealignerTargetCreator -nct 1 -nt 24 -R ${ref} -I ${in_bam} -o ${out}\r\n    }\r\n    output {\r\n        String intervals = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        out: "The intervals list to be used by IndelRealigner"\r\n    }\r\n}\r\n\r\ntask IndelRealigner {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String intervals\r\n    String out = sub(in_bam, "\\\\.bam*$", ".indels_realigned.bam")\r\n\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T IndelRealigner -nct 1 -nt 1 -R ${ref} -I ${in_bam} -targetIntervals ${intervals} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for the gatk task"\r\n        intervals: "The intervals list to be used by IndelRealigner"\r\n        out: "the bam including realigned indels."\r\n    }\r\n}\r\n\r\ntask CreateBamList {\r\n    String samples_file\r\n    String output_dir\r\n    String out_file = "${output_dir}bqsr_bams_list.txt"\r\n    command {\r\n        cat ${samples_file} | cut -f 2 > ${out_file}\r\n    }\r\n    output {\r\n        String out = out_file\r\n    }\r\n    parameter_meta {\r\n        samples_file: "The text file containing sample names and bam file paths."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        out_file: "The text file containing absolute paths to all bam files, one per line."\r\n    }\r\n}\r\n\r\ntask BaseRecalibrator {\r\n    String gatk\r\n    String ref\r\n    String sample_dir\r\n    String bam\r\n    Array[String] known_sites\r\n    String ? bqsr\r\n    String out_file\r\n    command {\r\n    java -Xmx4G  -jar ${gatk} -T BaseRecalibrator -nct 8 -nt 1 -R ${ref} -I  ${bam} -knownSites ${sep=" -knownSites " known_sites} -o ${sample_dir}/${out_file} ${" -BQSR " + bqsr}\r\n    }\r\n    output {\r\n        String out = "${sample_dir}/${out_file}"\r\n\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        bam_list: "The text file containing absolute paths to all bam files, one per line."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        bqsr: "Full path to bqsr file."\r\n    }\r\n}\r\n\r\ntask AnalyzeCovariates {\r\n    String gatk\r\n    String ref\r\n    String sample_name\r\n    String sample_dir\r\n    String before\r\n    String after\r\n    command {\r\n    source /broad/software/scripts/useuse\r\n    use R-3.1\r\n    java -Xmx8G -jar ${gatk} \\\r\n      -T AnalyzeCovariates \\\r\n      -R ${ref} \\\r\n      -before ${before} \\\r\n      -after ${after} \\\r\n      -plots ${sample_dir}/recalibration_plots.pdf\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        known_sites: "An array of databases of known polymorphic sites."\r\n        before: "The table output from the first BaseRecalibrator step."\r\n        after: "The table output from the second BaseRecalibrator step."\r\n    }\r\n}\r\n\r\ntask PrintReads {\r\n    String gatk\r\n    String ref\r\n    String in_bam\r\n    String bqsr\r\n    String out = sub(in_bam, "\\\\.bam*$", ".bqsr.bam")\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${gatk} -T PrintReads -nct 8 -nt 1 -R ${ref} -I ${in_bam} -BQSR ${bqsr} -o ${out}\r\n    }\r\n    output {\r\n        String bam = out\r\n    }\r\n    parameter_meta {\r\n        gatk: "The absolute path to the gatk executable jar."\r\n        ref: "fasta file of reference genome"\r\n        in_bam: "The input bam for PrintReads."\r\n        bqsr: "Full path to bqsr file."\r\n        out: "The bam file with bqsr applied to it."\r\n    }\r\n}\r\n# TODO: Make sure that the call mirrors logs of call in python pipeline.\r\n# NOTE: HaplotypeCaller complains if I don\'t provide --variant_index_type and variant_index_parameter\r\ntask HaplotypeCaller {\r\n    String gatk\r\n\tString ref\r\n\tString sample_name\r\n\tString sample_dir\r\n\tString in_bam\r\n\tString ? intervals\r\n\tString ? bqsr_file\r\n\tInt ? ploidy\r\n\tString ? erc\r\n\tString ? extra_hc_params\r\n    String out = "${sample_dir}/${sample_name}.g.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T HaplotypeCaller \\\r\n\t\t\t-nt 1 \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t--input_file ${in_bam} \\\r\n\t\t\t${"--intervals " + intervals} \\\r\n\t\t\t${"-BQSR " + bqsr_file} \\\r\n\t\t\t-ERC ${default="GVCF" erc} \\\r\n\t\t\t-ploidy ${default="2" ploidy} \\\r\n\t\t\t--interval_padding 100 \\\r\n\t\t\t-o ${out} \\\r\n\t\t\t-variant_index_type LINEAR \\\r\n\t\t\t-variant_index_parameter 128000 \\\r\n            ${default="\\n" extra_hc_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString vcf = out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n        sample_name: "The name of the sample as indicated by the 1st column of the gatk.samples_file json input."\r\n        sample_dir: "The sample-specific directory inside output_dir for each sample."\r\n        in_bam: "The bam file to call HaplotypeCaller on."\r\n        intervals: "An array of intervals to restrict processing to."\r\n        bqsr_file: "The full path to the BQSR file."\r\n        erc: "Mode for emitting reference confidence scores."\r\n        extra_hc_params: "A parameter that allows users to pass any additional paramters to the task."\r\n        out: "VCF file produced by haplotype caller."\r\n\t}\r\n}\r\n\r\ntask GenotypeGVCFs {\r\n\tString gatk\r\n\tString ref\r\n\tString ? extra_gg_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tString ? intervals\r\n\tArray[String] variant_files\r\n    String output_dir\r\n    Boolean ? all_sites\r\n    String gcvf_out = "${output_dir}/genotypeGVCFs.vcf"\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n\t    use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T GenotypeGVCFs \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${sep=" --intervals " "--intervals " + intervals} \\\r\n\t\t\t-o ${gcvf_out} \\\r\n\t\t\t-V ${sep=" -V " variant_files} \\\r\n\t\t\t-allSites ${default="false" all_sites}\r\n\t\t\t${default="\\n" extra_gg_params}\r\n\t}\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = gcvf_out\r\n\t}\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_gg_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\tout: "File to which variants should be written"\r\n\t\tploidy: "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy)."\r\n\t\tvariant_files: "One or more input gVCF files"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tall_sites: "Include loci found to be non-variant after genotyping"\r\n\t\tgcvf_out: "The output vcf of GenotypeGVCFs"\r\n\t}\r\n}\r\n\r\n# https://software.broadinstitute.org/gatk/documentation/article.php?id=1259\r\ntask VariantRecalibrator {\r\n\tString gatk\r\n\tString ref\r\n\tString output_dir\r\n\tString mode\r\n\tString ? intervals\r\n\tString task_input\r\n    Array[String] resource\r\n    Array[String] annotation\r\n    Int ? max_gaussians\r\n    Int ? mq_cap\r\n\tString tranches_file = "${output_dir}/${mode}.tranches"\r\n    String recal_file = "${output_dir}/${mode}.recal"\r\n    String rscript_file = "${output_dir}/${mode}.plots.R"\r\n\tString ? extra_vr_params # If a parameter you\'d like to use is missing from this task, use this term to add your own string\r\n\tcommand {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n\t\t\t-T VariantRecalibrator \\\r\n\t\t\t-R ${ref} \\\r\n\t\t\t${default="" "--intervals " + intervals} \\\r\n\t\t\t-input ${task_input} \\\r\n\t\t\t-mode ${mode} \\\r\n            -resource:${sep=" -resource:" resource} \\\r\n\t\t\t-recalFile ${recal_file} \\\r\n\t\t\t-tranchesFile ${tranches_file} \\\r\n\t\t\t-rscriptFile ${rscript_file} \\\r\n\t\t\t-an ${sep=" -an " annotation} \\\r\n\t\t\t--maxGaussians ${max_gaussians} \\\r\n\t\t\t--MQCapForLogitJitterTransform ${mq_cap}\r\n\t\t\t${default="\\n" extra_vr_params}\r\n\t}\r\n\r\n\toutput {\r\n\t\t#To track additional outputs from your task, please manually add them below\r\n\t\tString out = task_input\r\n\t\tString tranches = tranches_file\r\n\t\tString recal = recal_file\r\n\t\tString rscript = rscript_file\r\n\t}\r\n\r\n\tparameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\textra_vr_params: "An optional parameter which allows the user to specify additions to the command line at run time"\r\n\t\taggregate: "Additional raw input variants to be used in building the model"\r\n\t\ttask_input: "One or more VCFs of raw input variants to be recalibrated"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tresource: "A list of sites for which to apply a prior probability of being correct but which aren\'t used by the algorithm (training and truth sets are required to run)"\r\n\t\ttranches_file: "The output tranches file used by ApplyRecalibration"\r\n\t\tintervals: "One or more genomic intervals over which to operate"\r\n\t\tmode: "The mode for recalibration (indel or snp)."\r\n\t\tannotation: "An array of annotations to use for calculations."\r\n\t\tmax_gaussians: "Max number of Gaussians for the positive model"\r\n\t\tmq_cap: "Apply logit transform and jitter to MQ values"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n\t}\r\n}\r\n\r\ntask ApplyRecalibration {\r\n    String gatk\r\n    String ref\r\n    String vcf_in\r\n    Float ts_filter\r\n    String recal_file\r\n    String tranches\r\n    String mode\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/${mode}.recalibrated.filtered.vcf"\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n\t\tjava -Xmx8G -jar ${gatk} \\\r\n        -T ApplyRecalibration \\\r\n        -R ${ref} \\\r\n        -input ${vcf_in} \\\r\n        --ts_filter_level ${ts_filter} \\\r\n        -tranchesFile ${tranches} \\\r\n        -recalFile ${recal_file} \\\r\n        -mode ${mode} \\\r\n        -o ${vcf_out}\r\n\t\t}\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n\t\tgatk: "Executable jar for the GenomeAnalysisTK"\r\n\t\tref: "fasta file of reference genome"\r\n\t\tvcf_in: "The raw input variants to be recalibrated."\r\n\t\tts_filter: "The truth sensitivity level at which to start filtering"\r\n\t\trecal_file: "The output recal file used by ApplyRecalibration"\r\n\t\tmode: "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously."\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_out: "The output filtered and recalibrated VCF file in which each variant is annotated with its VQSLOD value"\r\n    }\r\n}\r\n\r\n# http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set\r\ntask SelectVariants {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String mode\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n        -T SelectVariants \\\r\n        -R ${ref} \\\r\n        -V ${vcf_in} \\\r\n        -selectType ${mode} \\\r\n        -o ${output_dir}/select${mode}.vcf\r\n    }\r\n    output {\r\n        String out = "${output_dir}/select${mode}.vcf"\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        }\r\n}\r\n\r\ntask HardFiltration {\r\n    String gatk\r\n    String ref\r\n    String output_dir\r\n    String vcf_in\r\n    String variant_type\r\n    String vcf_out = "${output_dir}/filtered_${variant_type}.vcf"\r\n    String filter_expression\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx8G -jar ${gatk} \\\r\n            -T VariantFiltration \\\r\n            -R ${ref} \\\r\n            -V ${vcf_in} \\\r\n            --filterExpression ${filter_expression} \\\r\n            --filterName "my_variant_filter" \\\r\n            -o ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        gatk: "Executable jar for the GenomeAnalysisTK"\r\n        ref: "fasta file of reference genome"\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        filter_expression: "The user-defined expressions to indicate which variants to filter."\r\n    }\r\n}\r\n\r\ntask CombineVariants {\r\n    String gatk\r\n    String output_dir\r\n    String ref\r\n    String vcf1\r\n    String vcf2\r\n    String outfile = "${output_dir}/filtered.combined.vcf"\r\n    command {\r\n         java -jar -Xmx8G ${gatk} \\\r\n           -T CombineVariants \\\r\n           -R ${ref} \\\r\n           --variant ${vcf1} \\\r\n           --variant ${vcf2} \\\r\n           -o ${outfile} \\\r\n           -genotypeMergeOptions UNIQUIFY\r\n    }\r\n    output {\r\n        String out = outfile\r\n    }\r\n}\r\n\r\n# Based on http://gatkforums.broadinstitute.org/gatk/discussion/50/adding-genomic-annotations-using-snpeff-and-variantannotator\r\ntask SnpEff {\r\n    String vcf_in\r\n    String output_dir\r\n    String vcf_out = "${output_dir}/snpEff_out.vcf"\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n    command {\r\n        source /broad/software/scripts/useuse\r\n        use Java-1.8\r\n        java -Xmx4G -jar ${snpeff} -v -ud 0 ${snpeff_db} ${vcf_in} ${snpeff_extra_params} > ${vcf_out}\r\n    }\r\n    output {\r\n        String out = vcf_out\r\n    }\r\n    parameter_meta {\r\n        output_dir: "The root directory for where all sample directories and ref index files will be deposited."\r\n        vcf_in: "The input variants file."\r\n        vcf_out: "The output variants file."\r\n        snp_eff: "The path to the snpEff executable."\r\n        snpeff_db: "The snpeff database to use."\r\n        snpeff_extra_params: "A string for passing any additional parameters to snpeff."\r\n    }\r\n}\r\n\r\nworkflow gatk {\r\n    # Initialize workflow\r\n    # Global parameters\r\n    File samples_file\r\n    String ref_path\r\n    String ref_file\r\n    String output_dir\r\n    String picard\r\n    String gatk_3_7\r\n    String gatk = gatk_3_7\r\n    # TCIR Selection\r\n    Boolean tcir\r\n    # BQSR selection and relevant parameters\r\n    Boolean bqsr\r\n    Array[String] known_sites\r\n    # HaplotypeCaller parameters\r\n    Float interval_size\r\n    String ? erc\r\n    Int ? ploidy\r\n    String ? extra_hc_params\r\n    String ? bqsr_recal_report\r\n    # GenotypeGVCF parameters\r\n    String ? extra_gg_params\r\n    Boolean ? all_sites\r\n    # VQSR selection and relevant parameters\r\n    Boolean vqsr\r\n    Array[String] snp_resource\r\n    Array[String] indel_resource\r\n    Array[String] snp_annotation\r\n    Array[String] indel_annotation\r\n    Int ? snp_max_gaussians\r\n    Int ? indel_max_gaussians\r\n    Int ? mq_cap_snp\r\n    Int ? mq_cap_indel\r\n    Float ts_filter_snp\r\n    Float ts_filter_indel\r\n    String ? extra_vr_params\r\n    # Hard filtration selection and relevant parameters\r\n    Boolean variant_filtration\r\n    String filter_expression\r\n    # SNPEff selection and relevant parameters\r\n    Boolean use_snpeff\r\n    String snpeff\r\n    String snpeff_db\r\n    String ? snpeff_extra_params\r\n\r\n    call VersionCheck{\r\n        input:\r\n        gatk = gatk\r\n    }\r\n    # Check\'s if index files exist(using .dict file as marker). Will always output path to localized reference\r\n    # With assumption that it either exists or will be created by IndexReference.\r\n    call MakeOutputDir {\r\n        input:\r\n        go = VersionCheck.out,\r\n        output_dir = output_dir\r\n    }\r\n    call CheckIndex {\r\n        input:\r\n        ref_file = ref_file,\r\n        output_dir = MakeOutputDir.out\r\n        }\r\n    # CheckIndex retcode 1 means sequence dictionary .dict file doesn\'t exist and assumes all index files also\r\n    # don\'t exist, therefore IndexReference will create them.\r\n    if (CheckIndex.retcode == 1) {\r\n        call IndexReference {\r\n            input:\r\n            ref_path = ref_path,\r\n            ref_file = ref_file,\r\n            picard = picard,\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    String int_ref = select_first([CheckIndex.out, IndexReference.out])\r\n    call CreateIntervalsList {\r\n        input:\r\n        ref = int_ref,\r\n        interval_size = interval_size,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n\r\n    scatter(sample in read_tsv(samples_file)) {\r\n        # Within specified output_dir, create a subdir using sample_name specified in 1st column of tsv file.\r\n        call MakeDir as MakeSampleDir{\r\n            input:\r\n            output_dir = MakeOutputDir.out,\r\n            sample_name = sample[0]\r\n        }\r\n\r\n        if (length(sample) == 2) {\r\n            call SamToFastq {\r\n                input:\r\n                picard = picard,\r\n                in_bam = sample[1],\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        if (length(sample) == 3) {\r\n            call CopyFastq as CopyFastq1 {\r\n                input:\r\n                fq = sample[1],\r\n                pair = 1,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n\r\n            call CopyFastq as CopyFastq2 {\r\n                input:\r\n                fq = sample[2],\r\n                pair = 2,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out\r\n            }\r\n        }\r\n\r\n        # This is necessary to name the eventual output of SamToFastq/CopyFastq as we can\'t do this inside those\r\n        # tasks due to the fact they exist in conditional statements.\r\n        call GenerateFastqNames {\r\n            input:\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call AlignBAM {\r\n            input:\r\n            ref = CheckIndex.out,\r\n            sample_dir = MakeSampleDir.out,\r\n            sample_name = sample[0],\r\n            fq_array = GenerateFastqNames.fastq_out\r\n        }\r\n        call SortSAM {\r\n            input:\r\n            picard = picard,\r\n            aligned_sam = AlignBAM.aligned_sam,\r\n            sample_dir = MakeSampleDir.out\r\n        }\r\n        call MarkDuplicates {\r\n            input:\r\n            picard = picard,\r\n            sorted_bam = SortSAM.bam\r\n        }\r\n        call ReorderSAM {\r\n            input:\r\n            picard = picard,\r\n            marked_bam = MarkDuplicates.bam,\r\n            ref = CheckIndex.out\r\n        }\r\n        call IndexBAM {\r\n            input:\r\n            reordered_bam = ReorderSAM.bam\r\n        }\r\n        if (tcir == true) {\r\n            call RealignerTargetCreator {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam\r\n            }\r\n            call IndelRealigner {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = IndexBAM.bam,\r\n                intervals = RealignerTargetCreator.intervals\r\n            }\r\n        }\r\n        if (bqsr == true) {\r\n            String bqsr_bam = select_first([ReorderSAM.bam, IndelRealigner.bam])\r\n            call BaseRecalibrator as BaseRecal_1 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                out_file = "recal_data.table"\r\n            }\r\n\r\n            call BaseRecalibrator as BaseRecal_2 {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_dir = MakeSampleDir.out,\r\n                bam = bqsr_bam,\r\n                known_sites = known_sites,\r\n                bqsr = BaseRecal_1.out,\r\n                out_file = "post_recal_data.table"\r\n            }\r\n\r\n            call AnalyzeCovariates {\r\n                input:\r\n               gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                sample_name = sample[0],\r\n                sample_dir = MakeSampleDir.out,\r\n                before = BaseRecal_1.out,\r\n                after = BaseRecal_2.out\r\n            }\r\n\r\n            call PrintReads {\r\n                input:\r\n                gatk = gatk,\r\n                ref = CheckIndex.out,\r\n                in_bam = bqsr_bam,\r\n                bqsr = BaseRecal_2.out\r\n            }\r\n        }\r\n\r\n        String hc_bam = select_first([PrintReads.bam, IndelRealigner.bam, ReorderSAM.bam])\r\n\r\n        call HaplotypeCaller {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            sample_name = sample[0],\r\n            sample_dir = MakeSampleDir.out,\r\n            in_bam = hc_bam,\r\n            intervals = CreateIntervalsList.out,\r\n            bqsr_file = bqsr_recal_report,\r\n            ploidy = ploidy,\r\n            erc = erc,\r\n            extra_hc_params = extra_hc_params\r\n        }\r\n    # Scatter block ends\r\n    }\r\n\r\n    call GenotypeGVCFs {\r\n\t    input:\r\n        gatk = gatk,\r\n        ref = CheckIndex.out,\r\n        extra_gg_params = extra_gg_params,\r\n        all_sites = all_sites,\r\n        intervals = CreateIntervalsList.out,\r\n        variant_files = hc_scatter_output,\r\n        output_dir = MakeOutputDir.out\r\n    }\r\n    if (vqsr == true) {\r\n        call VariantRecalibrator as SnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = GenotypeGVCFs.out,\r\n            resource = snp_resource,\r\n            annotation = snp_annotation,\r\n            mode = "snp",\r\n            max_gaussians = snp_max_gaussians,\r\n            mq_cap = mq_cap_snp,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n\r\n        call ApplyRecalibration as ApplySnpRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = GenotypeGVCFs.out,\r\n            ts_filter = ts_filter_snp,\r\n            recal_file = SnpRecalibration.recal,\r\n            tranches = SnpRecalibration.tranches,\r\n            mode = "snp",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n        call VariantRecalibrator as IndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            intervals = CreateIntervalsList.out,\r\n            task_input = ApplySnpRecalibration.out,\r\n            resource = indel_resource,\r\n            mode = "indel",\r\n            max_gaussians = indel_max_gaussians,\r\n            mq_cap = mq_cap_indel,\r\n            annotation = indel_annotation,\r\n            extra_vr_params = extra_vr_params\r\n        }\r\n        call ApplyRecalibration as ApplyIndelRecalibration {\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            vcf_in = ApplySnpRecalibration.out,\r\n            ts_filter = ts_filter_indel,\r\n            recal_file = IndelRecalibration.recal,\r\n            tranches = IndelRecalibration.tranches,\r\n            mode = "indel",\r\n            output_dir = MakeOutputDir.out\r\n        }\r\n    }\r\n    if (variant_filtration == true) {\r\n        String sv_vcf = select_first([ApplyIndelRecalibration.out, GenotypeGVCFs.out])\r\n        call SelectVariants as SelectSnps{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "SNP"\r\n        }\r\n        call HardFiltration as FilterSnps{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectSnps.out,\r\n            variant_type = "SNPs",\r\n            filter_expression = filter_expression\r\n        }\r\n        call SelectVariants as SelectIndels{\r\n            input:\r\n            gatk = gatk,\r\n            output_dir = MakeOutputDir.out,\r\n            ref = CheckIndex.out,\r\n            vcf_in = sv_vcf,\r\n            mode = "INDEL"\r\n        }\r\n        call HardFiltration as FilterIndels{\r\n            input:\r\n            gatk = gatk,\r\n            ref = CheckIndex.out,\r\n            output_dir = MakeOutputDir.out,\r\n            vcf_in = SelectIndels.out,\r\n            variant_type = "INDELS",\r\n            filter_expression = filter_expression\r\n        }\r\n        call CombineVariants {\r\n            input:\r\n                gatk = gatk,\r\n                output_dir = MakeOutputDir.out,\r\n                ref = CheckIndex.out,\r\n                vcf1 = FilterSnps.out,\r\n                vcf2 = FilterIndels.out\r\n        }\r\n        if (use_snpeff == true) {\r\n            call SnpEff {\r\n                input:\r\n                vcf_in = CombineVariants.out,\r\n                output_dir = MakeOutputDir.out,\r\n                snpeff_db = snpeff_db,\r\n                snpeff = snpeff,\r\n                snpeff_extra_params = snpeff_extra_params\r\n            }\r\n        }\r\n    }\r\n}'}, u'id': u'6b6bd1c5-f1fc-44e6-bf24-0e0bace07670'}
2017-09-06 09:35:46,430 - test_cromwell - INFO - Testing query_status...
2017-09-06 09:35:46,440 - test_cromwell - INFO - Result: {u'status': u'Submitted', u'id': u'6b6bd1c5-f1fc-44e6-bf24-0e0bace07670'}
2017-09-06 09:35:46,440 - test_cromwell - INFO - Testing start_workflow...
2017-09-06 09:35:46,441 - test_cromwell - INFO - Testing stop_workflow...
2017-09-06 09:35:46,460 - test_cromwell - INFO - Result: {u'status': u'Aborted', u'id': u'6b6bd1c5-f1fc-44e6-bf24-0e0bace07670'}
2017-09-06 09:35:46,461 - test_cromwell - INFO - Test done!
